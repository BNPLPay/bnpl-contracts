
> template-ethereum-contracts@0.1.0 test /Users/carter/Desktop/webprojects/bnpl/bnpl-contracts-v5
> cross-env HARDHAT_DEPLOY_FIXTURE=true HARDHAT_COMPILE=true mocha --bail --recursive test



  BankNodeCombos
Nothing to compile
No need to generate any newer typings.
{
  b: {
    BankNode: Contract {
      interface: [Interface],
      provider: [EthersProviderWrapper],
      signer: [SignerWithAddress],
      callStatic: [Object],
      estimateGas: [Object],
      functions: [Object],
      populateTransaction: [Object],
      filters: [Object],
      _runningEvents: {},
      _wrappedEmits: {},
      address: '0x018853225EE5debC46b3E7cF881cfAaD9Fc75cdA',
      resolvedAddress: [Promise],
      'DEFAULT_ADMIN_ROLE()': [Function],
      'MAX_LOAN_AMOUNT()': [Function],
      'MIN_LOAN_AMOUNT()': [Function],
      'MIN_LOAN_DURATION()': [Function],
      'MIN_LOAN_PAYMENT_INTERVAL()': [Function],
      'OPERATOR_ADMIN_ROLE()': [Function],
      'OPERATOR_ROLE()': [Function],
      'UNUSED_FUNDS_MIN_DEPOSIT_SIZE()': [Function],
      'accountsReceivableFromLoans()': [Function],
      'addLiquidity(uint256)': [Function],
      'approveLoanRequest(uint256)': [Function],
      'bankNodeId()': [Function],
      'bankNodeManager()': [Function],
      'baseLiquidityToken()': [Function],
      'baseTokenBalance()': [Function],
      'bnplSwapMarket()': [Function],
      'bnplSwapMarketPoolFee()': [Function],
      'bnplToken()': [Function],
      'calculateSlashAmount(uint256,uint256,uint256)': [Function],
      'denyLoanRequest(uint256)': [Function],
      'donate(uint256)': [Function],
      'getLoanNextDueDate(uint256)': [Function],
      'getMonthlyInterestPayment(uint256,uint256,uint256,uint256)': [Function],
      'getMonthlyPayment(uint256,uint256,uint256)': [Function],
      'getPaymentMultiplier(uint256,uint256)': [Function],
      'getPoolDepositConversion(uint256)': [Function],
      'getPoolTotalAssetsValue()': [Function],
      'getPoolTotalLiquidAssetsValue()': [Function],
      'getPoolWithdrawConversion(uint256)': [Function],
      'getPrincipleForMonth(uint256,uint256,uint256)': [Function],
      'getRoleAdmin(bytes32)': [Function],
      'getRoleMember(bytes32,uint256)': [Function],
      'getRoleMemberCount(bytes32)': [Function],
      'getValueOfUnusedFundsLendingDeposits()': [Function],
      'grantRole(bytes32,address)': [Function],
      'hasRole(bytes32,address)': [Function],
      'initialize((uint32,uint24,address,address,address,address,address,uint16,address,address,address,address,address))': [Function],
      'interestPaidForLoan(uint256)': [Function],
      'loanBondedAmount(uint256)': [Function],
      'loanIndex()': [Function],
      'loanRequestIndex()': [Function],
      'loanRequests(uint256)': [Function],
      'loans(uint256)': [Function],
      'makeLoanPayment(uint256)': [Function],
      'nodeOperatorBalance()': [Function],
      'nodeStakingPool()': [Function],
      'poolLiquidityToken()': [Function],
      'poolTokensCirculating()': [Function],
      'removeLiquidity(uint256)': [Function],
      'renounceRole(bytes32,address)': [Function],
      'reportOverdueLoan(uint256)': [Function],
      'requestLoan(uint256,uint64,uint32,uint256,uint8,string)': [Function],
      'revokeRole(bytes32,address)': [Function],
      'supportsInterface(bytes4)': [Function],
      'unusedFundsLendingContract()': [Function],
      'unusedFundsLendingMode()': [Function],
      'unusedFundsLendingToken()': [Function],
      DEFAULT_ADMIN_ROLE: [Function],
      MAX_LOAN_AMOUNT: [Function],
      MIN_LOAN_AMOUNT: [Function],
      MIN_LOAN_DURATION: [Function],
      MIN_LOAN_PAYMENT_INTERVAL: [Function],
      OPERATOR_ADMIN_ROLE: [Function],
      OPERATOR_ROLE: [Function],
      UNUSED_FUNDS_MIN_DEPOSIT_SIZE: [Function],
      accountsReceivableFromLoans: [Function],
      addLiquidity: [Function],
      approveLoanRequest: [Function],
      bankNodeId: [Function],
      bankNodeManager: [Function],
      baseLiquidityToken: [Function],
      baseTokenBalance: [Function],
      bnplSwapMarket: [Function],
      bnplSwapMarketPoolFee: [Function],
      bnplToken: [Function],
      calculateSlashAmount: [Function],
      denyLoanRequest: [Function],
      donate: [Function],
      getLoanNextDueDate: [Function],
      getMonthlyInterestPayment: [Function],
      getMonthlyPayment: [Function],
      getPaymentMultiplier: [Function],
      getPoolDepositConversion: [Function],
      getPoolTotalAssetsValue: [Function],
      getPoolTotalLiquidAssetsValue: [Function],
      getPoolWithdrawConversion: [Function],
      getPrincipleForMonth: [Function],
      getRoleAdmin: [Function],
      getRoleMember: [Function],
      getRoleMemberCount: [Function],
      getValueOfUnusedFundsLendingDeposits: [Function],
      grantRole: [Function],
      hasRole: [Function],
      initialize: [Function],
      interestPaidForLoan: [Function],
      loanBondedAmount: [Function],
      loanIndex: [Function],
      loanRequestIndex: [Function],
      loanRequests: [Function],
      loans: [Function],
      makeLoanPayment: [Function],
      nodeOperatorBalance: [Function],
      nodeStakingPool: [Function],
      poolLiquidityToken: [Function],
      poolTokensCirculating: [Function],
      removeLiquidity: [Function],
      renounceRole: [Function],
      reportOverdueLoan: [Function],
      requestLoan: [Function],
      revokeRole: [Function],
      supportsInterface: [Function],
      unusedFundsLendingContract: [Function],
      unusedFundsLendingMode: [Function],
      unusedFundsLendingToken: [Function]
    },
    StakingPool: Contract {
      interface: [Interface],
      provider: [EthersProviderWrapper],
      signer: [SignerWithAddress],
      callStatic: [Object],
      estimateGas: [Object],
      functions: [Object],
      populateTransaction: [Object],
      filters: [Object],
      _runningEvents: {},
      _wrappedEmits: {},
      address: '0x97521E85c5AE9996bb686a9775e3a3E80dc0629F',
      resolvedAddress: [Promise],
      'BASE_LIQUIDITY_TOKEN()': [Function],
      'DEFAULT_ADMIN_ROLE()': [Function],
      'POOL_LIQUIDITY_TOKEN()': [Function],
      'SLASHER_ADMIN_ROLE()': [Function],
      'SLASHER_ROLE()': [Function],
      'baseTokenBalance()': [Function],
      'bondTokens(uint256)': [Function],
      'calculateSlashAmount(uint256,uint256,uint256)': [Function],
      'claimTokenLockup(address)': [Function],
      'claimTokenNextNLockups(address,uint32)': [Function],
      'donate(uint256)': [Function],
      'encodedLockupStatuses(address)': [Function],
      'encodedTokenLockups(uint256)': [Function],
      'getNextTokenLockupForUser(address)': [Function],
      'getPoolDepositConversion(uint256)': [Function],
      'getPoolTotalAssetsValue()': [Function],
      'getPoolWithdrawConversion(uint256)': [Function],
      'getRoleAdmin(bytes32)': [Function],
      'getRoleMember(bytes32,uint256)': [Function],
      'getRoleMemberCount(bytes32)': [Function],
      'getTokenLockup(address,uint32)': [Function],
      'getUnstakeLockupPeriod()': [Function],
      'grantRole(bytes32,address)': [Function],
      'hasRole(bytes32,address)': [Function],
      'initialize(address,address,address,address,uint256)': [Function],
      'poolTokenEffectiveSupply()': [Function],
      'poolTokensCirculating()': [Function],
      'renounceRole(bytes32,address)': [Function],
      'revokeRole(bytes32,address)': [Function],
      'slash(uint256)': [Function],
      'stakeTokens(uint256)': [Function],
      'supportsInterface(bytes4)': [Function],
      'tokensBondedAllTime()': [Function],
      'totalTokensLocked()': [Function],
      'unstakeTokens(uint256)': [Function],
      'userLockupStatus(address)': [Function],
      'virtualPoolTokensCount()': [Function],
      BASE_LIQUIDITY_TOKEN: [Function],
      DEFAULT_ADMIN_ROLE: [Function],
      POOL_LIQUIDITY_TOKEN: [Function],
      SLASHER_ADMIN_ROLE: [Function],
      SLASHER_ROLE: [Function],
      baseTokenBalance: [Function],
      bondTokens: [Function],
      calculateSlashAmount: [Function],
      claimTokenLockup: [Function],
      claimTokenNextNLockups: [Function],
      donate: [Function],
      encodedLockupStatuses: [Function],
      encodedTokenLockups: [Function],
      getNextTokenLockupForUser: [Function],
      getPoolDepositConversion: [Function],
      getPoolTotalAssetsValue: [Function],
      getPoolWithdrawConversion: [Function],
      getRoleAdmin: [Function],
      getRoleMember: [Function],
      getRoleMemberCount: [Function],
      getTokenLockup: [Function],
      getUnstakeLockupPeriod: [Function],
      grantRole: [Function],
      hasRole: [Function],
      initialize: [Function],
      poolTokenEffectiveSupply: [Function],
      poolTokensCirculating: [Function],
      renounceRole: [Function],
      revokeRole: [Function],
      slash: [Function],
      stakeTokens: [Function],
      supportsInterface: [Function],
      tokensBondedAllTime: [Function],
      totalTokensLocked: [Function],
      unstakeTokens: [Function],
      userLockupStatus: [Function],
      virtualPoolTokensCount: [Function]
    },
    BaseLiquidityToken: Contract {
      interface: [Interface],
      provider: [EthersProviderWrapper],
      signer: [SignerWithAddress],
      callStatic: [Object],
      estimateGas: [Object],
      functions: [Object],
      populateTransaction: [Object],
      filters: [Object],
      _runningEvents: {},
      _wrappedEmits: {},
      address: '0x663F3ad617193148711d28f5334eE4Ed07016602',
      resolvedAddress: [Promise],
      'allowance(address,address)': [Function],
      'approve(address,uint256)': [Function],
      'balanceOf(address)': [Function],
      'decimals()': [Function],
      'decreaseAllowance(address,uint256)': [Function],
      'increaseAllowance(address,uint256)': [Function],
      'name()': [Function],
      'symbol()': [Function],
      'totalSupply()': [Function],
      'transfer(address,uint256)': [Function],
      'transferFrom(address,address,uint256)': [Function],
      allowance: [Function],
      approve: [Function],
      balanceOf: [Function],
      decimals: [Function],
      decreaseAllowance: [Function],
      increaseAllowance: [Function],
      name: [Function],
      symbol: [Function],
      totalSupply: [Function],
      transfer: [Function],
      transferFrom: [Function]
    },
    PoolLiquidityToken: Contract {
      interface: [Interface],
      provider: [EthersProviderWrapper],
      signer: [SignerWithAddress],
      callStatic: [Object],
      estimateGas: [Object],
      functions: [Object],
      populateTransaction: [Object],
      filters: [Object],
      _runningEvents: {},
      _wrappedEmits: {},
      address: '0xDEeaa5005B2ac4Fb589539f50d9a792d0156A356',
      resolvedAddress: [Promise],
      'DEFAULT_ADMIN_ROLE()': [Function],
      'MINTER_ADMIN_ROLE()': [Function],
      'MINTER_ROLE()': [Function],
      '_decimalsValue()': [Function],
      'allowance(address,address)': [Function],
      'approve(address,uint256)': [Function],
      'balanceOf(address)': [Function],
      'burn(uint256)': [Function],
      'burnFrom(address,uint256)': [Function],
      'decimals()': [Function],
      'decreaseAllowance(address,uint256)': [Function],
      'getRoleAdmin(bytes32)': [Function],
      'getRoleMember(bytes32,uint256)': [Function],
      'getRoleMemberCount(bytes32)': [Function],
      'grantRole(bytes32,address)': [Function],
      'hasRole(bytes32,address)': [Function],
      'increaseAllowance(address,uint256)': [Function],
      'initialize(string,string,uint8,address,address)': [Function],
      'mint(address,uint256)': [Function],
      'name()': [Function],
      'renounceRole(bytes32,address)': [Function],
      'revokeRole(bytes32,address)': [Function],
      'supportsInterface(bytes4)': [Function],
      'symbol()': [Function],
      'totalSupply()': [Function],
      'transfer(address,uint256)': [Function],
      'transferFrom(address,address,uint256)': [Function],
      DEFAULT_ADMIN_ROLE: [Function],
      MINTER_ADMIN_ROLE: [Function],
      MINTER_ROLE: [Function],
      _decimalsValue: [Function],
      allowance: [Function],
      approve: [Function],
      balanceOf: [Function],
      burn: [Function],
      burnFrom: [Function],
      decimals: [Function],
      decreaseAllowance: [Function],
      getRoleAdmin: [Function],
      getRoleMember: [Function],
      getRoleMemberCount: [Function],
      grantRole: [Function],
      hasRole: [Function],
      increaseAllowance: [Function],
      initialize: [Function],
      mint: [Function],
      name: [Function],
      renounceRole: [Function],
      revokeRole: [Function],
      supportsInterface: [Function],
      symbol: [Function],
      totalSupply: [Function],
      transfer: [Function],
      transferFrom: [Function]
    },
    StakingPoolToken: Contract {
      interface: [Interface],
      provider: [EthersProviderWrapper],
      signer: [SignerWithAddress],
      callStatic: [Object],
      estimateGas: [Object],
      functions: [Object],
      populateTransaction: [Object],
      filters: [Object],
      _runningEvents: {},
      _wrappedEmits: {},
      address: '0xFa99B41509C1c539CcA19c78a5627C11AD32EaCf',
      resolvedAddress: [Promise],
      'DEFAULT_ADMIN_ROLE()': [Function],
      'MINTER_ADMIN_ROLE()': [Function],
      'MINTER_ROLE()': [Function],
      '_decimalsValue()': [Function],
      'allowance(address,address)': [Function],
      'approve(address,uint256)': [Function],
      'balanceOf(address)': [Function],
      'burn(uint256)': [Function],
      'burnFrom(address,uint256)': [Function],
      'decimals()': [Function],
      'decreaseAllowance(address,uint256)': [Function],
      'getRoleAdmin(bytes32)': [Function],
      'getRoleMember(bytes32,uint256)': [Function],
      'getRoleMemberCount(bytes32)': [Function],
      'grantRole(bytes32,address)': [Function],
      'hasRole(bytes32,address)': [Function],
      'increaseAllowance(address,uint256)': [Function],
      'initialize(string,string,uint8,address,address)': [Function],
      'mint(address,uint256)': [Function],
      'name()': [Function],
      'renounceRole(bytes32,address)': [Function],
      'revokeRole(bytes32,address)': [Function],
      'supportsInterface(bytes4)': [Function],
      'symbol()': [Function],
      'totalSupply()': [Function],
      'transfer(address,uint256)': [Function],
      'transferFrom(address,address,uint256)': [Function],
      DEFAULT_ADMIN_ROLE: [Function],
      MINTER_ADMIN_ROLE: [Function],
      MINTER_ROLE: [Function],
      _decimalsValue: [Function],
      allowance: [Function],
      approve: [Function],
      balanceOf: [Function],
      burn: [Function],
      burnFrom: [Function],
      decimals: [Function],
      decreaseAllowance: [Function],
      getRoleAdmin: [Function],
      getRoleMember: [Function],
      getRoleMemberCount: [Function],
      grantRole: [Function],
      hasRole: [Function],
      increaseAllowance: [Function],
      initialize: [Function],
      mint: [Function],
      name: [Function],
      renounceRole: [Function],
      revokeRole: [Function],
      supportsInterface: [Function],
      symbol: [Function],
      totalSupply: [Function],
      transfer: [Function],
      transferFrom: [Function]
    },
    BNPLToken: Contract {
      interface: [Interface],
      provider: [EthersProviderWrapper],
      signer: [SignerWithAddress],
      callStatic: [Object],
      estimateGas: [Object],
      functions: [Object],
      populateTransaction: [Object],
      filters: [Object],
      _runningEvents: {},
      _wrappedEmits: {},
      address: '0x8464135c8F25Da09e49BC8782676a84730C318bC',
      resolvedAddress: [Promise],
      'DEFAULT_ADMIN_ROLE()': [Function],
      'MINTER_ADMIN_ROLE()': [Function],
      'MINTER_ROLE()': [Function],
      '_decimalsValue()': [Function],
      'allowance(address,address)': [Function],
      'approve(address,uint256)': [Function],
      'balanceOf(address)': [Function],
      'burn(uint256)': [Function],
      'burnFrom(address,uint256)': [Function],
      'decimals()': [Function],
      'decreaseAllowance(address,uint256)': [Function],
      'getRoleAdmin(bytes32)': [Function],
      'getRoleMember(bytes32,uint256)': [Function],
      'getRoleMemberCount(bytes32)': [Function],
      'grantRole(bytes32,address)': [Function],
      'hasRole(bytes32,address)': [Function],
      'increaseAllowance(address,uint256)': [Function],
      'initialize(string,string,uint8,address,address)': [Function],
      'mint(address,uint256)': [Function],
      'name()': [Function],
      'renounceRole(bytes32,address)': [Function],
      'revokeRole(bytes32,address)': [Function],
      'supportsInterface(bytes4)': [Function],
      'symbol()': [Function],
      'totalSupply()': [Function],
      'transfer(address,uint256)': [Function],
      'transferFrom(address,address,uint256)': [Function],
      DEFAULT_ADMIN_ROLE: [Function],
      MINTER_ADMIN_ROLE: [Function],
      MINTER_ROLE: [Function],
      _decimalsValue: [Function],
      allowance: [Function],
      approve: [Function],
      balanceOf: [Function],
      burn: [Function],
      burnFrom: [Function],
      decimals: [Function],
      decreaseAllowance: [Function],
      getRoleAdmin: [Function],
      getRoleMember: [Function],
      getRoleMemberCount: [Function],
      grantRole: [Function],
      hasRole: [Function],
      increaseAllowance: [Function],
      initialize: [Function],
      mint: [Function],
      name: [Function],
      renounceRole: [Function],
      revokeRole: [Function],
      supportsInterface: [Function],
      symbol: [Function],
      totalSupply: [Function],
      transfer: [Function],
      transferFrom: [Function]
    },
    BankNodeLendingRewards: Contract {
      interface: [Interface],
      provider: [EthersProviderWrapper],
      signer: [SignerWithAddress],
      callStatic: [Object],
      estimateGas: [Object],
      functions: [Object],
      populateTransaction: [Object],
      filters: [Object],
      _runningEvents: {},
      _wrappedEmits: {},
      address: '0x9E7088C23e5C0B2D02cD7886A1BDbC7FE8b71016',
      resolvedAddress: [Promise],
      'DEFAULT_ADMIN_ROLE()': [Function],
      'REWARDS_DISTRIBUTOR_ADMIN_ROLE()': [Function],
      'REWARDS_DISTRIBUTOR_ROLE()': [Function],
      'REWARDS_MANAGER()': [Function],
      'REWARDS_MANAGER_ROLE_ADMIN()': [Function],
      '_totalSupply(uint32)': [Function],
      'balanceOf(address,uint32)': [Function],
      'bankNodeManager()': [Function],
      'decodeUserBankNodeKey(uint256)': [Function],
      'decodeVaultValue(uint256)': [Function],
      'defaultRewardsDuration()': [Function],
      'distributeBNPLTokensToBankNodes(uint256)': [Function],
      'distributeBNPLTokensToBankNodes2(uint256)': [Function],
      'earned(address,uint32)': [Function],
      'encodeUserBankNodeKey(address,uint32)': [Function],
      'encodeVaultValue(uint256,uint40)': [Function],
      'exit(uint32)': [Function],
      'getBNPLTokenDistribution(uint256)': [Function],
      'getReward(uint32)': [Function],
      'getRewardForDuration(uint32)': [Function],
      'getRoleAdmin(bytes32)': [Function],
      'grantRole(bytes32,address)': [Function],
      'hasRole(bytes32,address)': [Function],
      'initialize(uint256,address,address,address,address)': [Function],
      'lastTimeRewardApplicable(uint32)': [Function],
      'lastUpdateTime(uint32)': [Function],
      'notifyRewardAmount(uint32,uint256)': [Function],
      'paused()': [Function],
      'periodFinish(uint32)': [Function],
      'renounceRole(bytes32,address)': [Function],
      'revokeRole(bytes32,address)': [Function],
      'rewardPerToken(uint32)': [Function],
      'rewardPerTokenStored(uint32)': [Function],
      'rewardRate(uint32)': [Function],
      'rewards(uint256)': [Function],
      'rewardsDuration(uint32)': [Function],
      'rewardsToken()': [Function],
      'setRewardsDuration(uint32,uint256)': [Function],
      'stake(uint32,uint256)': [Function],
      'supportsInterface(bytes4)': [Function],
      'totalSupply(uint32)': [Function],
      'userRewardPerTokenPaid(uint256)': [Function],
      'withdraw(uint32,uint256)': [Function],
      DEFAULT_ADMIN_ROLE: [Function],
      REWARDS_DISTRIBUTOR_ADMIN_ROLE: [Function],
      REWARDS_DISTRIBUTOR_ROLE: [Function],
      REWARDS_MANAGER: [Function],
      REWARDS_MANAGER_ROLE_ADMIN: [Function],
      _totalSupply: [Function],
      balanceOf: [Function],
      bankNodeManager: [Function],
      decodeUserBankNodeKey: [Function],
      decodeVaultValue: [Function],
      defaultRewardsDuration: [Function],
      distributeBNPLTokensToBankNodes: [Function],
      distributeBNPLTokensToBankNodes2: [Function],
      earned: [Function],
      encodeUserBankNodeKey: [Function],
      encodeVaultValue: [Function],
      exit: [Function],
      getBNPLTokenDistribution: [Function],
      getReward: [Function],
      getRewardForDuration: [Function],
      getRoleAdmin: [Function],
      grantRole: [Function],
      hasRole: [Function],
      initialize: [Function],
      lastTimeRewardApplicable: [Function],
      lastUpdateTime: [Function],
      notifyRewardAmount: [Function],
      paused: [Function],
      periodFinish: [Function],
      renounceRole: [Function],
      revokeRole: [Function],
      rewardPerToken: [Function],
      rewardPerTokenStored: [Function],
      rewardRate: [Function],
      rewards: [Function],
      rewardsDuration: [Function],
      rewardsToken: [Function],
      setRewardsDuration: [Function],
      stake: [Function],
      supportsInterface: [Function],
      totalSupply: [Function],
      userRewardPerTokenPaid: [Function],
      withdraw: [Function]
    },
    address: ''
  },
  bankNodeFinancialState: {
    baseTokenBalance: BigNumber { _hex: '0x00', _isBigNumber: true },
    nodeOperatorBalance: BigNumber { _hex: '0x00', _isBigNumber: true },
    accountsReceivableFromLoans: BigNumber { _hex: '0x00', _isBigNumber: true },
    poolTokensCirculating: BigNumber { _hex: '0x152d02c7e14af6800000', _isBigNumber: true },
    loanRequestIndex: BigNumber { _hex: '0x00', _isBigNumber: true },
    loanIndex: BigNumber { _hex: '0x00', _isBigNumber: true },
    valueOfUnusedFundsLendingDeposits: BigNumber { _hex: '0x152d02c7e14af6800000', _isBigNumber: true },
    poolTotalAssetsValue: BigNumber { _hex: '0x152d02c7e14af6800000', _isBigNumber: true },
    poolTotalLiquidAssetsValue: BigNumber { _hex: '0x152d02c7e14af6800000', _isBigNumber: true },
    poolDepositConversion: BigNumber { _hex: '0x0de0b6b3a7640000', _isBigNumber: true },
    poolWithdrawConversion: BigNumber { _hex: '0x0de0b6b3a7640000', _isBigNumber: true }
  },
  stakingPoolFinancialState: {
    totalTokensLocked: BigNumber { _hex: '0x00', _isBigNumber: true },
    unstakeLockupPeriod: BigNumber { _hex: '0x093a80', _isBigNumber: true },
    baseTokenBalance: BigNumber { _hex: '0x013da329b6336471800000', _isBigNumber: true },
    poolTokensCirculating: BigNumber { _hex: '0x69e10de76676d0800000', _isBigNumber: true },
    poolTotalAssetsValue: BigNumber { _hex: '0x013da329b6336471800000', _isBigNumber: true },
    poolDepositConversion: BigNumber { _hex: '0x0de0b6b3a7640000', _isBigNumber: true },
    poolWithdrawConversion: BigNumber { _hex: '0x0de0b6b3a7640000', _isBigNumber: true },
    tokensBondedAllTime: BigNumber { _hex: '0xd3c21bcecceda1000000', _isBigNumber: true }
  }
}
[
  {
    baseTokenBalance: BigNumber { _hex: '0x00', _isBigNumber: true },
    nodeOperatorBalance: BigNumber { _hex: '0x00', _isBigNumber: true },
    accountsReceivableFromLoans: BigNumber { _hex: '0x054b40b1f852bda00000', _isBigNumber: true },
    poolTokensCirculating: BigNumber { _hex: '0x152d02c7e14af6800000', _isBigNumber: true },
    loanRequestIndex: BigNumber { _hex: '0x01', _isBigNumber: true },
    loanIndex: BigNumber { _hex: '0x01', _isBigNumber: true },
    valueOfUnusedFundsLendingDeposits: BigNumber { _hex: '0x0fe1c215e8f838e00000', _isBigNumber: true },
    poolTotalAssetsValue: BigNumber { _hex: '0x152d02c7e14af6800000', _isBigNumber: true },
    poolTotalLiquidAssetsValue: BigNumber { _hex: '0x0fe1c215e8f838e00000', _isBigNumber: true },
    poolDepositConversion: BigNumber { _hex: '0x0de0b6b3a7640000', _isBigNumber: true },
    poolWithdrawConversion: BigNumber { _hex: '0x0de0b6b3a7640000', _isBigNumber: true }
  },
  {
    totalTokensLocked: BigNumber { _hex: '0x00', _isBigNumber: true },
    unstakeLockupPeriod: BigNumber { _hex: '0x093a80', _isBigNumber: true },
    baseTokenBalance: BigNumber { _hex: '0x013da329b6336471800000', _isBigNumber: true },
    poolTokensCirculating: BigNumber { _hex: '0x69e10de76676d0800000', _isBigNumber: true },
    poolTotalAssetsValue: BigNumber { _hex: '0x013da329b6336471800000', _isBigNumber: true },
    poolDepositConversion: BigNumber { _hex: '0x0de0b6b3a7640000', _isBigNumber: true },
    poolWithdrawConversion: BigNumber { _hex: '0x0de0b6b3a7640000', _isBigNumber: true },
    tokensBondedAllTime: BigNumber { _hex: '0xd3c21bcecceda1000000', _isBigNumber: true }
  }
] 0 2
    ✔ 3 month loan for 25000 at 10% APR (Paid in Full) (7453ms)
default occurred!
FINSTATE-start:  finStatesStart
{
  baseTokenBalance: '0',
  nodeOperatorBalance: '0',
  accountsReceivableFromLoans: '0',
  poolTokensCirculating: '100000000000000000000000',
  loanRequestIndex: '0',
  loanIndex: '0',
  valueOfUnusedFundsLendingDeposits: '100000000000000000000000',
  poolTotalAssetsValue: '100000000000000000000000',
  poolTotalLiquidAssetsValue: '100000000000000000000000',
  poolDepositConversion: '1000000000000000000',
  poolWithdrawConversion: '1000000000000000000'
}
{
  totalTokensLocked: '0',
  unstakeLockupPeriod: '604800',
  baseTokenBalance: '1500000000000000000000000',
  poolTokensCirculating: '500000000000000000000000',
  poolTotalAssetsValue: '1500000000000000000000000',
  poolDepositConversion: '1000000000000000000',
  poolWithdrawConversion: '1000000000000000000',
  tokensBondedAllTime: '1000000000000000000000000'
}
FINSTATEN-END:  finStatesStart
FINSTATE-start:  finStatesAfterLoanA
{
  baseTokenBalance: '0',
  nodeOperatorBalance: '0',
  accountsReceivableFromLoans: '25000000000000000000000',
  poolTokensCirculating: '100000000000000000000000',
  loanRequestIndex: '1',
  loanIndex: '1',
  valueOfUnusedFundsLendingDeposits: '75000000000000000000000',
  poolTotalAssetsValue: '100000000000000000000000',
  poolTotalLiquidAssetsValue: '75000000000000000000000',
  poolDepositConversion: '1000000000000000000',
  poolWithdrawConversion: '1000000000000000000'
}
{
  totalTokensLocked: '0',
  unstakeLockupPeriod: '604800',
  baseTokenBalance: '1500000000000000000000000',
  poolTokensCirculating: '500000000000000000000000',
  poolTotalAssetsValue: '1500000000000000000000000',
  poolDepositConversion: '1000000000000000000',
  poolWithdrawConversion: '1000000000000000000',
  tokensBondedAllTime: '1000000000000000000000000'
}
FINSTATEN-END:  finStatesAfterLoanA
DELTA
{
  baseTokenBalance: '0',
  nodeOperatorBalance: '0',
  accountsReceivableFromLoans: '25000000000000000000000',
  poolTokensCirculating: '0',
  loanRequestIndex: '1',
  loanIndex: '1',
  valueOfUnusedFundsLendingDeposits: '-25000000000000000000000',
  poolTotalAssetsValue: '0',
  poolTotalLiquidAssetsValue: '-25000000000000000000000',
  poolDepositConversion: '0',
  poolWithdrawConversion: '0'
}
FINSTATE-start:  finStatesAfterLoanAPayment1
{
  baseTokenBalance: '0',
  nodeOperatorBalance: '0',
  accountsReceivableFromLoans: '16735726911687059150000',
  poolTokensCirculating: '100000000000000000000000',
  loanRequestIndex: '1',
  loanIndex: '1',
  valueOfUnusedFundsLendingDeposits: '83430939754979607510000',
  poolTotalAssetsValue: '100166666666666666660000',
  poolTotalLiquidAssetsValue: '83430939754979607510000',
  poolDepositConversion: '998336106489184692',
  poolWithdrawConversion: '1001666666666666666'
}
{
  totalTokensLocked: '0',
  unstakeLockupPeriod: '604800',
  baseTokenBalance: '1500020833333333333332500',
  poolTokensCirculating: '500000000000000000000000',
  poolTotalAssetsValue: '1500020833333333333332500',
  poolDepositConversion: '999986111304009666',
  poolWithdrawConversion: '1000013888888888888',
  tokensBondedAllTime: '1000000000000000000000000'
}
FINSTATEN-END:  finStatesAfterLoanAPayment1
FINSTATE-start:  finStatesAfterLoanAPayment2
{
  baseTokenBalance: '0',
  nodeOperatorBalance: '0',
  accountsReceivableFromLoans: '8402584880971510450000',
  poolTokensCirculating: '100000000000000000000000',
  loanRequestIndex: '1',
  loanIndex: '1',
  valueOfUnusedFundsLendingDeposits: '91875653298439736590000',
  poolTotalAssetsValue: '100278238179411247040000',
  poolTotalLiquidAssetsValue: '91875653298439736590000',
  poolDepositConversion: '997225338373880865',
  poolWithdrawConversion: '1002782381794112470'
}
{
  totalTokensLocked: '0',
  unstakeLockupPeriod: '604800',
  baseTokenBalance: '1500034779772426405880000',
  poolTokensCirculating: '500000000000000000000000',
  poolTotalAssetsValue: '1500034779772426405880000',
  poolDepositConversion: '999976814022651073',
  poolWithdrawConversion: '1000023186514950937',
  tokensBondedAllTime: '1000000000000000000000000'
}
FINSTATEN-END:  finStatesAfterLoanAPayment2
FINSTATE-start:  finStatesAfterLoanAPayment3Missed
{
  baseTokenBalance: '121381097242402502926265',
  nodeOperatorBalance: '0',
  accountsReceivableFromLoans: '0',
  poolTokensCirculating: '100000000000000000000000',
  loanRequestIndex: '1',
  loanIndex: '1',
  valueOfUnusedFundsLendingDeposits: '91875653298439736590000',
  poolTotalAssetsValue: '213256750540842239516265',
  poolTotalLiquidAssetsValue: '213256750540842239516265',
  poolDepositConversion: '468918333165956803',
  poolWithdrawConversion: '2132567505408422395'
}
{
  totalTokensLocked: '0',
  unstakeLockupPeriod: '604800',
  baseTokenBalance: '1378688462302450308833735',
  poolTokensCirculating: '500000000000000000000000',
  poolTotalAssetsValue: '1378688462302450308833735',
  poolDepositConversion: '1087990536669144131',
  poolWithdrawConversion: '919125641534966872',
  tokensBondedAllTime: '1000000000000000000000000'
}
FINSTATEN-END:  finStatesAfterLoanAPayment3Missed
FINSTATE-start:  finStatesAfterDonation1
{
  baseTokenBalance: '133381097242402502926265',
  nodeOperatorBalance: '0',
  accountsReceivableFromLoans: '0',
  poolTokensCirculating: '100000000000000000000000',
  loanRequestIndex: '1',
  loanIndex: '1',
  valueOfUnusedFundsLendingDeposits: '91875653298439736590000',
  poolTotalAssetsValue: '225256750540842239516265',
  poolTotalLiquidAssetsValue: '225256750540842239516265',
  poolDepositConversion: '443937860951557070',
  poolWithdrawConversion: '2252567505408422395'
}
{
  totalTokensLocked: '0',
  unstakeLockupPeriod: '604800',
  baseTokenBalance: '1528688462302450308833735',
  poolTokensCirculating: '500000000000000000000000',
  poolTotalAssetsValue: '1528688462302450308833735',
  poolDepositConversion: '981233283949012817',
  poolWithdrawConversion: '1019125641534966872',
  tokensBondedAllTime: '1000000000000000000000000'
}
FINSTATEN-END:  finStatesAfterDonation1
    ✔ 3 month loan for 25000 at 10% APR (Misses final payment) (3942ms)

  BankNodeManager
    ✔ create node a (1670ms)
    ✔ not enough to bond

  FullTests
    ✔ create node a (934ms)

  RewardsStaking
balances:  [
  '250000000000000000000000',
  '360000000000000000000000',
  '280000000000000000000000'
]
total bnpl staked across all three:  890000000000000000000000
chain calculation distribution [
  '2808988764044943820224719',
  '4044943820224719101123595',
  '3146067415730337078651685'
]
    ✔ 3 bank nodes distribution values  (2551ms)
1
2
3
4
5
6
7
8
9
allFromChainCalc [
  '2808988764044943820224',
  '4044943820224719101123',
  '3146067415730337078651'
]
totalForAllNodesFromChain 9999999999999999999998
10
11
12
13
14
15
16
17
18
9288900000000000 26752200000000000 31210900000000000
sum:  67252000000000000
done
    ✔ 3 bank nodes distribution  (4441ms)


  7 passing (21s)

