{
  "address": "0x1717e93cEA4e9E5cBb92bFEA13113fffc10c3973",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONFIGURE_NODE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapMarket",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "swapMarketPoolFee",
              "type": "uint24"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "valueMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "unusedFundsLendingMode",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "unusedFundsLendingContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unusedFundsLendingToken",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolSymbol",
              "type": "string"
            }
          ],
          "internalType": "struct IBankNodeManager.LendableToken",
          "name": "_lendableToken",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "enabled",
          "type": "uint8"
        }
      ],
      "name": "addLendableToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bankNodeAddressToId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankNodeCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "bankNodeId",
          "type": "uint32"
        }
      ],
      "name": "bankNodeIdExists",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankNodeLendingRewards",
      "outputs": [
        {
          "internalType": "contract BankNodeLendingRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "bankNodes",
      "outputs": [
        {
          "internalType": "address",
          "name": "bankNodeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bankNodeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bnplStakingPoolContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bnplStakingPoolToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lendableToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "createdAt",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "nodeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bnplToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokensToBond",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lendableTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "nodeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        }
      ],
      "name": "createBondedBankNode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "enabledLendableTokens",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "bankNodeId",
          "type": "uint32"
        }
      ],
      "name": "getBankNodeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "bankNodeId",
          "type": "uint32"
        }
      ],
      "name": "getBankNodeLendableToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "bankNodeId",
          "type": "uint32"
        }
      ],
      "name": "getBankNodeStakingPoolContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "bankNodeId",
          "type": "uint32"
        }
      ],
      "name": "getBankNodeStakingPoolToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "bankNodeId",
          "type": "uint32"
        }
      ],
      "name": "getBankNodeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBNPLProtocolConfig",
          "name": "_protocolConfig",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_configurator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumBankNodeBondedAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract BankNodeLendingRewards",
          "name": "_bankNodeLendingRewards",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendableTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapMarket",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "swapMarketPoolFee",
          "type": "uint24"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "valueMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "unusedFundsLendingMode",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "unusedFundsLendingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "unusedFundsLendingToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "poolSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBankNodeBondedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolConfig",
      "outputs": [
        {
          "internalType": "contract IBNPLProtocolConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "enabled",
          "type": "uint8"
        }
      ],
      "name": "setLendableTokenStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumBankNodeBondedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumBankNodeBondedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9d695ef6a5399c0f86d29f64ff2b0e184e23a755bed2be952430b930f103545",
  "receipt": {
    "to": null,
    "from": "0x2Cfc39B9D40A346990e3838e119Ed115c46c6cb3",
    "contractAddress": "0x1717e93cEA4e9E5cBb92bFEA13113fffc10c3973",
    "transactionIndex": 3,
    "gasUsed": "3346953",
    "logsBloom": "0x
    "blockHash": "0x512c38b10a1f840371f0a0ef1d174f7a38b509442b31f3bb7618b236b9a0ccde",
    "transactionHash": "0xe9d695ef6a5399c0f86d29f64ff2b0e184e23a755bed2be952430b930f103545",
    "logs": [],
    "blockNumber": 11526911,
    "cumulativeGasUsed": "3659547",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5db0db624a6dd07d1009191e5f6b75b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIGURE_NODE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMarket\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"swapMarketPoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"valueMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"unusedFundsLendingMode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"unusedFundsLendingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unusedFundsLendingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolSymbol\",\"type\":\"string\"}],\"internalType\":\"struct IBankNodeManager.LendableToken\",\"name\":\"_lendableToken\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"enabled\",\"type\":\"uint8\"}],\"name\":\"addLendableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bankNodeAddressToId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankNodeCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"bankNodeIdExists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankNodeLendingRewards\",\"outputs\":[{\"internalType\":\"contract BankNodeLendingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"bankNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bankNodeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bankNodeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bnplStakingPoolContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bnplStakingPoolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"nodeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnplToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensToBond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lendableTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nodeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"name\":\"createBondedBankNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledLendableTokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeLendableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeStakingPoolContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeStakingPoolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bankNodeId\",\"type\":\"uint32\"}],\"name\":\"getBankNodeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBNPLProtocolConfig\",\"name\":\"_protocolConfig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_configurator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBankNodeBondedAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract BankNodeLendingRewards\",\"name\":\"_bankNodeLendingRewards\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMarket\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"swapMarketPoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"valueMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"unusedFundsLendingMode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"unusedFundsLendingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unusedFundsLendingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBankNodeBondedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolConfig\",\"outputs\":[{\"internalType\":\"contract IBNPLProtocolConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"enabled\",\"type\":\"uint8\"}],\"name\":\"setLendableTokenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumBankNodeBondedAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumBankNodeBondedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBondedBankNode(address,uint256,address,string,string)\":{\"params\":{\"lendableTokenAddress\":\"Which lendable token will be lent to borrowers for this bank node (ex. the address of USDT's erc20 smart contract)\",\"nodeName\":\"the official name of the bank node\",\"operator\":\"The node operator who will be assigned the permissions of bank node admin for the newly created bank node\",\"tokensToBond\":\"The number of BNPL tokens to bond for the node\",\"website\":\"the official website of the bank node\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLendableToken((address,address,uint24,uint8,uint256,uint16,address,address,string,string),uint8)\":{\"notice\":\"allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to add support for a new ERC20 token to be used as lendable tokens for new bank nodes\"},\"createBondedBankNode(address,uint256,address,string,string)\":{\"notice\":\"creates a new bonded bank node\"},\"setLendableTokenStatus(address,uint8)\":{\"notice\":\"allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to enable/disable support for ERC20 tokens to be used as lendable tokens for new bank nodes (does not effect existing nodes)\"},\"setMinimumBankNodeBondedAmount(uint256)\":{\"notice\":\"allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to set the minimum BNPL to bond per node\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Management/BankNodeManager.sol\":\"BankNodeManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2d8b1825d587f3384d6d87655f3cb66f0d71fe8dda7d98f2f9267a4bb842927d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf87bd7a150c81aad67bb354413fe55cb005e922c6e48d3580a63e32efa913c74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9dc1ad66ada6a503bef1ffde62ac688c58eac660fe50c054f6e49e3b27ae295d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x617614c3aaada8d7a901da2126a7407ae7e06b0410807f5c1b49cea9076199e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x15a35b237beb6f27d2546361342485eda5850ed8fa1cd12ae8f3f7ca7a88d6f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/Aave/IAaveLendingPool.sol\":{\"content\":\"// contracts/IAaveLendingPool.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAaveLendingPool {\\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n    function withdraw(address asset, uint256 amount, address to) external;\\n}\",\"keccak256\":\"0xb1e3b0e240c5e922f94d039deabc1709c730c8679a0f8790f4b280a9b5d1aaa8\",\"license\":\"MIT\"},\"src/BankNode/IBNPLBankNode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IMintableBurnableTokenUpgradeable.sol\\\";\\nimport \\\"../Aave/IAaveLendingPool.sol\\\";\\nimport \\\"./StakingPool/IBNPLNodeStakingPool.sol\\\";\\nimport \\\"../SwapMarket/IBNPLSwapMarket.sol\\\";\\nimport \\\"../Management/IBankNodeManager.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the IBNPLBankNode standard\\n */\\ninterface IBankNodeInitializableV1 {\\n    struct BankNodeInitializeArgsV1 {\\n        uint32 bankNodeId;\\n        uint24 bnplSwapMarketPoolFee;\\n        address bankNodeManager;\\n        address operatorAdmin;\\n        address operator;\\n        address bnplToken;\\n        address bnplSwapMarket;\\n        uint16 unusedFundsLendingMode;\\n        address unusedFundsLendingContract;\\n        address unusedFundsLendingToken;\\n        address nodeStakingPool;\\n        address baseLiquidityToken;\\n        address poolLiquidityToken;\\n    }\\n\\n    function initialize(BankNodeInitializeArgsV1 calldata bankNodeInitConfig) external;\\n}\\n\\n/**\\n * @dev Interface of the IBNPLBankNode standard\\n */\\ninterface IBNPLBankNode is IBankNodeInitializableV1 {\\n    // start structs\\n\\n    // end structs\\n    function unusedFundsLendingMode() external view returns (uint16);\\n\\n    function unusedFundsLendingContract() external view returns (IAaveLendingPool);\\n\\n    function unusedFundsLendingToken() external view returns (IERC20);\\n\\n    function bnplSwapMarket() external view returns (IBNPLSwapMarket);\\n\\n    function bnplSwapMarketPoolFee() external view returns (uint24);\\n\\n    function bankNodeId() external view returns (uint32);\\n\\n    function nodeStakingPool() external view returns (IBNPLNodeStakingPool);\\n\\n    function bankNodeManager() external view returns (IBankNodeManager);\\n\\n    function baseTokenBalance() external view returns (uint256);\\n\\n    function nodeOperatorBalance() external view returns (uint256);\\n\\n    function accountsReceivableFromLoans() external view returns (uint256);\\n\\n    function poolTokensCirculating() external view returns (uint256);\\n\\n    function loanRequestIndex() external view returns (uint256);\\n\\n    function loanIndex() external view returns (uint256);\\n\\n    function baseLiquidityToken() external view returns (IERC20);\\n\\n    function poolLiquidityToken() external view returns (IMintableBurnableTokenUpgradeable);\\n\\n    function interestPaidForLoan(uint256 loanId) external view returns (uint256);\\n\\n    function loanBondedAmount(uint256 loanId) external view returns (uint256);\\n\\n    function loanRequests(uint256 _loanRequestId)\\n        external\\n        view\\n        returns (\\n            address borrower,\\n            uint256 loanAmount,\\n            uint64 totalLoanDuration,\\n            uint32 numberOfPayments,\\n            uint256 amountPerPayment,\\n            uint256 interestRatePerPayment,\\n            uint8 status, // 0 = under review, 1 = rejected, 2 = cancelled, 3 = *unused for now*, 4 = approved\\n            uint64 statusUpdatedAt,\\n            address statusModifiedBy,\\n            uint256 interestRate,\\n            uint256 loanId,\\n            uint8 messageType, // 0 = plain text, 1 = encrypted with the public key\\n            string memory message\\n        );\\n\\n    function loans(uint256 _loanId)\\n        external\\n        view\\n        returns (\\n            address borrower,\\n            uint256 loanAmount,\\n            uint64 totalLoanDuration,\\n            uint32 numberOfPayments,\\n            uint64 loanStartedAt,\\n            uint32 numberOfPaymentsMade,\\n            uint256 amountPerPayment,\\n            uint256 interestRatePerPayment,\\n            uint256 totalAmountPaid,\\n            uint256 remainingBalance,\\n            uint8 status, // 0 = ongoing, 1 = completed, 2 = overdue, 3 = written off\\n            uint64 statusUpdatedAt,\\n            uint256 loanRequestId\\n        );\\n\\n    /*\\n    mapping(uint256 => LoanRequest) public loanRequests;\\n    mapping(uint256 => Loan) public loans;\\n    */\\n\\n    // end public vars\\n\\n    function donate(uint256 depositAmount) external;\\n\\n    function addLiquidity(uint256 depositAmount) external;\\n\\n    function removeLiquidity(uint256 withdrawAmount) external;\\n\\n    function requestLoan(\\n        uint256 loanAmount,\\n        uint64 totalLoanDuration,\\n        uint32 numberOfPayments,\\n        uint256 amountPerPayment,\\n        uint8 messageType,\\n        string memory message\\n    ) external;\\n\\n    function denyLoanRequest(uint256 loanRequestId) external;\\n\\n    function approveLoanRequest(uint256 loanRequestId) external;\\n\\n    function makeLoanPayment(uint256 loanId) external;\\n\\n    function reportOverdueLoan(uint256 loanId) external;\\n\\n    function withdrawNodeOperatorBalance(uint256 amount, address to) external;\\n}\\n\",\"keccak256\":\"0xb56f8eb6b4b6cb6fdbb27334f7411aceeb7edacef9452d9cfdfee6df3fff766c\",\"license\":\"MIT\"},\"src/BankNode/StakingPool/IBNPLNodeStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the IBankNodeStakingPoolInitializableV1 standard\\n */\\ninterface IBankNodeStakingPoolInitializableV1 {\\n    function initialize(\\n        address bnplToken,\\n        address poolBNPLToken,\\n        address slasherAdmin,\\n        address tokenBonder,\\n        uint256 tokensToBond\\n    ) external;\\n}\\n\\n/**\\n * @dev Interface of the IBankNode standard\\n */\\ninterface IBNPLNodeStakingPool is IBankNodeStakingPoolInitializableV1 {\\n    function donate(uint256 donateAmount) external;\\n\\n    function bondTokens(uint256 bondAmount) external;\\n\\n    function stakeTokens(uint256 stakeAmount) external;\\n\\n    function unstakeTokens(uint256 unstakeAmount) external;\\n\\n    function slash(uint256 slashAmount) external;\\n\\n    function getPoolTotalAssetsValue() external view returns (uint256);\\n\\n    function claimNodeOwnerPoolTokenRewards(address to) external;\\n}\\n\",\"keccak256\":\"0xefaef154b7218da7f260d6b37d87b5cc6128ef3bb994113de4fbab1c1475f83c\",\"license\":\"MIT\"},\"src/ERC20/IGenericBurnableFrom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenericBurnableFrom {\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x471b5c676872a6772ef580de12bec40b7af5eea8317b3adb493a3feab1085d73\",\"license\":\"MIT\"},\"src/ERC20/IGenericMintableTo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenericMintableTo {\\n    function mint(address to, uint256 amount) external;\\n}\",\"keccak256\":\"0xdb66c992731075a96b8e8757b7e7063b75185ab6b918077a65eb18ace65ccb51\",\"license\":\"MIT\"},\"src/ERC20/IMintableBurnableTokenUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IGenericMintableTo.sol\\\";\\nimport \\\"./IGenericBurnableFrom.sol\\\";\\n\\n/**\\n * @dev Interface of the IMintableTokenUpgradeable standard\\n */\\ninterface IMintableTokenUpgradeable is IGenericMintableTo, IERC20Upgradeable {\\n\\n}\\n\\n/**\\n * @dev Interface of the IMintableBurnableTokenUpgradeable standard\\n */\\ninterface IMintableBurnableTokenUpgradeable is IMintableTokenUpgradeable, IGenericBurnableFrom {\\n\\n}\\n\",\"keccak256\":\"0x2f0304470b5bb37091f47625801d3ccdb0e330bce980c9562f54b3c14e19f767\",\"license\":\"MIT\"},\"src/ERC20/ITokenInitializableV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ITokenInitializableV1 standard \\n */\\ninterface ITokenInitializableV1 {\\n  function initialize(string calldata name, string calldata symbol, uint8 decimalsValue, address minterAdmin, address minter) external;\\n}\",\"keccak256\":\"0x74cafead292adc6af17b657c50681ae30d3ca43796d1e47a103f45616b425ade\",\"license\":\"MIT\"},\"src/Management/BankNodeManager.sol\":{\"content\":\"// contracts/PoolTokenUpgradeable.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\nimport \\\"../Utils/TransferHelper.sol\\\";\\n\\nimport \\\"../BankNode/IBNPLBankNode.sol\\\";\\nimport \\\"../BankNode/StakingPool/IBNPLNodeStakingPool.sol\\\";\\nimport \\\"../ERC20/ITokenInitializableV1.sol\\\";\\nimport \\\"./IBankNodeManager.sol\\\";\\nimport \\\"../ProtocolDeploy/IBNPLProtocolConfig.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract BankNodeManager is\\n    Initializable,\\n    AccessControlEnumerableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IBankNodeManager\\n{\\n    bytes32 public constant CONFIGURE_NODE_MANAGER_ROLE = keccak256(\\\"CONFIGURE_NODE_MANAGER_ROLE\\\");\\n\\n    mapping(address => uint8) public override enabledLendableTokens;\\n\\n    mapping(address => LendableToken) public override lendableTokens;\\n\\n    mapping(uint32 => BankNode) public override bankNodes;\\n    mapping(address => uint32) public override bankNodeAddressToId;\\n\\n    uint256 public override minimumBankNodeBondedAmount;\\n    uint32 public override bankNodeCount;\\n    IERC20 public override bnplToken;\\n\\n    BankNodeLendingRewards public override bankNodeLendingRewards;\\n\\n    IBNPLProtocolConfig public override protocolConfig;\\n\\n    function bankNodeIdExists(uint32 bankNodeId) public view override returns (uint256) {\\n        return (bankNodeId >= 1 && bankNodeId <= bankNodeCount) ? 1 : 0;\\n    }\\n\\n    function getBankNodeContract(uint32 bankNodeId) public view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].bankNodeContract;\\n    }\\n\\n    function getBankNodeToken(uint32 bankNodeId) public view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].bankNodeToken;\\n    }\\n\\n    function getBankNodeStakingPoolContract(uint32 bankNodeId) public view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].bnplStakingPoolContract;\\n    }\\n\\n    function getBankNodeStakingPoolToken(uint32 bankNodeId) public view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].bnplStakingPoolToken;\\n    }\\n\\n    function getBankNodeLendableToken(uint32 bankNodeId) public view override returns (address) {\\n        require(bankNodeId >= 1 && bankNodeId <= bankNodeCount, \\\"Invalid or unregistered bank node id!\\\");\\n        return bankNodes[bankNodeId].lendableToken;\\n    }\\n\\n    function initialize(\\n        IBNPLProtocolConfig _protocolConfig,\\n        address _configurator,\\n        uint256 _minimumBankNodeBondedAmount,\\n        BankNodeLendingRewards _bankNodeLendingRewards\\n    ) public override initializer nonReentrant {\\n        require(address(_protocolConfig) != address(0), \\\"_protocolConfig cannot be 0\\\");\\n        require(_configurator != address(0), \\\"_configurator cannot be 0\\\");\\n        require(_minimumBankNodeBondedAmount > 0, \\\"_minimumBankNodeBondedAmount cannot be 0\\\");\\n\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        protocolConfig = _protocolConfig;\\n\\n        minimumBankNodeBondedAmount = _minimumBankNodeBondedAmount;\\n        bankNodeCount = 0;\\n        bnplToken = IERC20(_protocolConfig.bnplToken());\\n        require(address(bnplToken) != address(0), \\\"_bnplToken cannot be 0\\\");\\n        bankNodeLendingRewards = _bankNodeLendingRewards;\\n        require(address(bankNodeLendingRewards) != address(0), \\\"_bankNodeLendingRewards cannot be 0\\\");\\n\\n        _setupRole(CONFIGURE_NODE_MANAGER_ROLE, _configurator);\\n    }\\n\\n    /// @notice allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to add support for a new ERC20 token to be used as lendable tokens for new bank nodes\\n    function addLendableToken(LendableToken calldata _lendableToken, uint8 enabled)\\n        public\\n        override\\n        nonReentrant\\n        onlyRole(CONFIGURE_NODE_MANAGER_ROLE)\\n    {\\n        require(address(_lendableToken.tokenContract) != address(0), \\\"tokenContract must not be 0\\\");\\n        require(address(_lendableToken.swapMarket) != address(0), \\\"swapMarket must not be 0\\\");\\n        require(_lendableToken.valueMultiplier > 0, \\\"valueMultiplier must be > 0\\\");\\n        require(enabled == 0 || enabled == 1, \\\"enabled 1 or 0\\\");\\n\\n        LendableToken storage lendableToken = lendableTokens[_lendableToken.tokenContract];\\n        lendableToken.tokenContract = _lendableToken.tokenContract;\\n\\n        lendableToken.swapMarket = _lendableToken.swapMarket;\\n        lendableToken.swapMarketPoolFee = _lendableToken.swapMarketPoolFee;\\n\\n        lendableToken.decimals = _lendableToken.decimals;\\n        lendableToken.valueMultiplier = _lendableToken.valueMultiplier;\\n        lendableToken.unusedFundsLendingMode = _lendableToken.unusedFundsLendingMode;\\n        lendableToken.unusedFundsLendingContract = _lendableToken.unusedFundsLendingContract;\\n        lendableToken.unusedFundsLendingToken = _lendableToken.unusedFundsLendingToken;\\n\\n        lendableToken.symbol = _lendableToken.symbol;\\n        lendableToken.poolSymbol = _lendableToken.poolSymbol;\\n        enabledLendableTokens[_lendableToken.tokenContract] = enabled;\\n    }\\n\\n    /// @notice allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to enable/disable support for ERC20 tokens to be used as lendable tokens for new bank nodes (does not effect existing nodes)\\n    function setLendableTokenStatus(address tokenContract, uint8 enabled)\\n        public\\n        override\\n        onlyRole(CONFIGURE_NODE_MANAGER_ROLE)\\n    {\\n        require(enabled == 0 || enabled == 1, \\\"enabled 1 or 0\\\");\\n        enabledLendableTokens[tokenContract] = enabled;\\n    }\\n\\n    /// @notice allows admins with the role \\\"CONFIGURE_NODE_MANAGER_ROLE\\\" to set the minimum BNPL to bond per node\\n    function setMinimumBankNodeBondedAmount(uint256 _minimumBankNodeBondedAmount)\\n        public\\n        override\\n        onlyRole(CONFIGURE_NODE_MANAGER_ROLE)\\n    {\\n        minimumBankNodeBondedAmount = _minimumBankNodeBondedAmount;\\n    }\\n\\n    function _createBankNodeLendingPoolTokenClone(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimalsValue,\\n        address minterAdmin,\\n        address minter\\n    ) private returns (address) {\\n        BeaconProxy p = new BeaconProxy(\\n            address(protocolConfig.upBeaconBankNodeLendingPoolToken()),\\n            abi.encodeWithSelector(\\n                ITokenInitializableV1.initialize.selector,\\n                //initialize(string calldata name, string calldata symbol, uint8 decimalsValue, address minterAdmin, address minter) external;\\n                name,\\n                symbol,\\n                decimalsValue,\\n                minterAdmin,\\n                minter\\n            )\\n        );\\n        return address(p);\\n    }\\n\\n    function _createBankNodeStakingPoolTokenClone(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimalsValue,\\n        address minterAdmin,\\n        address minter\\n    ) private returns (address) {\\n        BeaconProxy p = new BeaconProxy(\\n            address(protocolConfig.upBeaconBankNodeStakingPool()),\\n            abi.encodeWithSelector(\\n                ITokenInitializableV1.initialize.selector,\\n                //initialize(string calldata name, string calldata symbol, uint8 decimalsValue, address minterAdmin, address minter) external;\\n                name,\\n                symbol,\\n                decimalsValue,\\n                minterAdmin,\\n                minter\\n            )\\n        );\\n        return address(p);\\n    }\\n\\n    function _createBankNodeContracts(\\n        uint32 bankNodeId,\\n        address operatorAdmin,\\n        address operator,\\n        uint256 tokensToBond,\\n        address lendableTokenAddress\\n    )\\n        private\\n        returns (\\n            address bankNodeContract,\\n            address bankNodeToken,\\n            address bnplStakingPoolContract,\\n            address bnplStakingPoolToken\\n        )\\n    {\\n        require(lendableTokenAddress != address(0), \\\"lendableTokenAddress cannot be 0\\\");\\n        LendableToken memory lendableToken = lendableTokens[lendableTokenAddress];\\n        require(\\n            lendableToken.tokenContract == lendableTokenAddress && lendableToken.valueMultiplier > 0,\\n            \\\"invalid lendable token\\\"\\n        );\\n        require(enabledLendableTokens[lendableTokenAddress] == 1, \\\"lendable token not enabled\\\");\\n        bankNodeContract = address(new BeaconProxy(address(protocolConfig.upBeaconBankNode()), \\\"\\\"));\\n        bnplStakingPoolContract = address(new BeaconProxy(address(protocolConfig.upBeaconBankNodeStakingPool()), \\\"\\\"));\\n\\n        bnplStakingPoolToken = _createBankNodeLendingPoolTokenClone(\\n            \\\"Banking Node Pool BNPL\\\",\\n            \\\"pBNPL\\\",\\n            18,\\n            address(0),\\n            bnplStakingPoolContract\\n        );\\n\\n        TransferHelper.safeTransferFrom(address(bnplToken), msg.sender, bnplStakingPoolContract, tokensToBond);\\n\\n        IBNPLNodeStakingPool(bnplStakingPoolContract).initialize(\\n            address(bnplToken),\\n            bnplStakingPoolToken,\\n            bankNodeContract,\\n            msg.sender,\\n            tokensToBond\\n        );\\n\\n        bankNodeToken = _createBankNodeLendingPoolTokenClone(\\n            lendableToken.poolSymbol,\\n            lendableToken.poolSymbol,\\n            lendableToken.decimals,\\n            address(0),\\n            bankNodeContract\\n        );\\n\\n        IBankNodeInitializableV1(bankNodeContract).initialize(\\n            IBankNodeInitializableV1.BankNodeInitializeArgsV1({\\n                bankNodeId: bankNodeId,\\n                bnplSwapMarketPoolFee: lendableToken.swapMarketPoolFee,\\n                bankNodeManager: address(this),\\n                operatorAdmin: operatorAdmin,\\n                operator: operator,\\n                bnplToken: address(bnplToken),\\n                bnplSwapMarket: lendableToken.swapMarket,\\n                unusedFundsLendingMode: lendableToken.unusedFundsLendingMode,\\n                unusedFundsLendingContract: lendableToken.unusedFundsLendingContract,\\n                unusedFundsLendingToken: lendableToken.unusedFundsLendingToken,\\n                nodeStakingPool: bnplStakingPoolContract,\\n                baseLiquidityToken: lendableToken.tokenContract,\\n                poolLiquidityToken: bankNodeToken\\n            })\\n        );\\n    }\\n\\n    /// @notice creates a new bonded bank node\\n    /// @param operator The node operator who will be assigned the permissions of bank node admin for the newly created bank node\\n    /// @param tokensToBond The number of BNPL tokens to bond for the node\\n    /// @param lendableTokenAddress Which lendable token will be lent to borrowers for this bank node (ex. the address of USDT's erc20 smart contract)\\n    /// @param nodeName the official name of the bank node\\n    /// @param website the official website of the bank node\\n    function createBondedBankNode(\\n        address operator,\\n        uint256 tokensToBond,\\n        address lendableTokenAddress,\\n        string calldata nodeName,\\n        string calldata website\\n    ) public override nonReentrant returns (uint256) {\\n        require(tokensToBond >= minimumBankNodeBondedAmount && tokensToBond > 0, \\\"Not enough tokens bonded\\\");\\n        require(operator != address(0), \\\"operator cannot be 0\\\");\\n        require(lendableTokenAddress != address(0), \\\"lendableTokenAddress cannot be 0\\\");\\n\\n        bankNodeCount = bankNodeCount + 1;\\n        uint32 bankNodeId = bankNodeCount;\\n\\n        (\\n            address bankNodeContract,\\n            address bankNodeToken,\\n            address bnplStakingPoolContract,\\n            address bnplStakingPoolToken\\n        ) = _createBankNodeContracts(bankNodeId, operator, operator, tokensToBond, lendableTokenAddress);\\n\\n        BankNode storage bankNode = bankNodes[bankNodeId];\\n        bankNodeAddressToId[bankNodeContract] = bankNodeId;\\n\\n        bankNode.bankNodeContract = bankNodeContract;\\n        bankNode.bankNodeToken = bankNodeToken;\\n\\n        bankNode.bnplStakingPoolContract = bnplStakingPoolContract;\\n        bankNode.bnplStakingPoolToken = bnplStakingPoolToken;\\n\\n        bankNode.lendableToken = lendableTokenAddress;\\n        bankNode.creator = msg.sender;\\n\\n        bankNode.id = bankNodeId;\\n        bankNode.createdAt = uint64(block.timestamp);\\n\\n        bankNode.nodeName = nodeName;\\n        bankNode.website = website;\\n\\n        return bankNodeId;\\n    }\\n}\\n\",\"keccak256\":\"0xf04fbccb83dedde9db07cdcac1505554138f9022dcf6871e37c9200f6b200e8c\",\"license\":\"MIT\"},\"src/Management/IBankNodeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../ProtocolDeploy/IBNPLProtocolConfig.sol\\\";\\nimport \\\"../Rewards/PlatformRewards/BankNodeLendingRewards.sol\\\";\\n\\ninterface IBankNodeManager {\\n    struct LendableToken {\\n        address tokenContract;\\n        address swapMarket;\\n        uint24 swapMarketPoolFee;\\n        uint8 decimals;\\n        uint256 valueMultiplier; //USD_VALUE = amount * valueMultiplier / 10**18\\n        uint16 unusedFundsLendingMode;\\n        address unusedFundsLendingContract;\\n        address unusedFundsLendingToken;\\n        string symbol;\\n        string poolSymbol;\\n    }\\n\\n    struct BankNode {\\n        address bankNodeContract;\\n        address bankNodeToken;\\n        address bnplStakingPoolContract;\\n        address bnplStakingPoolToken;\\n        address lendableToken;\\n        address creator;\\n        uint32 id;\\n        uint64 createdAt;\\n        string nodeName;\\n        string website;\\n    }\\n    struct CreateBankNodeContractsInput {\\n        uint32 bankNodeId;\\n        address operatorAdmin;\\n        address operator;\\n        address lendableTokenAddress;\\n    }\\n    struct CreateBankNodeContractsOutput {\\n        address bankNodeContract;\\n        address bankNodeToken;\\n        address bnplStakingPoolContract;\\n        address bnplStakingPoolToken;\\n    }\\n\\n    function bankNodeIdExists(uint32 bankNodeId) external view returns (uint256);\\n\\n    function getBankNodeContract(uint32 bankNodeId) external view returns (address);\\n\\n    function getBankNodeToken(uint32 bankNodeId) external view returns (address);\\n\\n    function getBankNodeStakingPoolContract(uint32 bankNodeId) external view returns (address);\\n\\n    function getBankNodeStakingPoolToken(uint32 bankNodeId) external view returns (address);\\n\\n    function getBankNodeLendableToken(uint32 bankNodeId) external view returns (address);\\n\\n    function initialize(\\n        IBNPLProtocolConfig _protocolConfig,\\n        address _configurator,\\n        uint256 _minimumBankNodeBondedAmount,\\n        BankNodeLendingRewards _bankNodeLendingRewards\\n    ) external;\\n\\n    function enabledLendableTokens(address lendableTokenAddress) external view returns (uint8);\\n\\n    function lendableTokens(address lendableTokenAddress)\\n        external\\n        view\\n        returns (\\n            address tokenContract,\\n            address swapMarket,\\n            uint24 swapMarketPoolFee,\\n            uint8 decimals,\\n            uint256 valueMultiplier, //USD_VALUE = amount * valueMultiplier / 10**18\\n            uint16 unusedFundsLendingMode,\\n            address unusedFundsLendingContract,\\n            address unusedFundsLendingToken,\\n            string calldata symbol,\\n            string calldata poolSymbol\\n        );\\n\\n    function bankNodes(uint32 bankNodeId)\\n        external\\n        view\\n        returns (\\n            address bankNodeContract,\\n            address bankNodeToken,\\n            address bnplStakingPoolContract,\\n            address bnplStakingPoolToken,\\n            address lendableToken,\\n            address creator,\\n            uint32 id,\\n            uint64 createdAt,\\n            string calldata nodeName,\\n            string calldata website\\n        );\\n\\n    function bankNodeAddressToId(address bankNodeAddressTo) external view returns (uint32);\\n\\n    function minimumBankNodeBondedAmount() external view returns (uint256);\\n\\n    function bankNodeCount() external view returns (uint32);\\n\\n    function bnplToken() external view returns (IERC20);\\n\\n    function bankNodeLendingRewards() external view returns (BankNodeLendingRewards);\\n\\n    function protocolConfig() external view returns (IBNPLProtocolConfig);\\n\\n    function addLendableToken(LendableToken calldata _lendableToken, uint8 enabled) external;\\n\\n    function setLendableTokenStatus(address tokenContract, uint8 enabled) external;\\n\\n    function setMinimumBankNodeBondedAmount(uint256 _minimumBankNodeBondedAmount) external;\\n\\n    function createBondedBankNode(\\n        address operator,\\n        uint256 tokensToBond,\\n        address lendableTokenAddress,\\n        string calldata nodeName,\\n        string calldata website\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x623dae855036089554fde4b39fe68e0618f8a0b500fa113fdb03579ccb203004\",\"license\":\"MIT\"},\"src/ProtocolDeploy/IBNPLProtocolConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Management/IBankNodeManager.sol\\\";\\nimport \\\"../Rewards/PlatformRewards/BankNodeLendingRewards.sol\\\";\\n\\ninterface IBNPLProtocolConfig {\\n    function networkId() external view returns (uint64);\\n\\n    function networkName() external view returns (string memory);\\n\\n    function bnplToken() external view returns (IERC20);\\n\\n    function upBeaconBankNodeManager() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNode() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNodeLendingPoolToken() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNodeStakingPool() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNodeStakingPoolToken() external view returns (UpgradeableBeacon);\\n\\n    function upBeaconBankNodeLendingRewards() external view returns (UpgradeableBeacon);\\n\\n    function bankNodeManager() external view returns (IBankNodeManager);\\n}\\n\",\"keccak256\":\"0x8ef9f8b0da30ee502f6e85a094b363c665ef4dd2a2ca5f28b1f847d225db9675\",\"license\":\"MIT\"},\"src/Rewards/PlatformRewards/BankNodeLendingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\nBorrowed heavily from Synthetix\\n\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2021 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../../Management/IBankNodeManager.sol\\\";\\nimport \\\"./BankNodeRewardSystem.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BankNodeLendingRewards is Initializable, BankNodeRewardSystem {\\n    using SafeERC20 for IERC20;\\n\\n    function initialize(\\n        uint256 _defaultRewardsDuration,\\n        address _rewardsToken,\\n        address _bankNodeManager,\\n        address distributorAdmin,\\n        address managerAdmin\\n    ) public initializer {\\n        _BankNodesRewardSystem_init_(\\n            _defaultRewardsDuration,\\n            _rewardsToken,\\n            _bankNodeManager,\\n            distributorAdmin,\\n            managerAdmin\\n        );\\n    }\\n\\n    function _bnplTokensStakedToBankNode(uint32 bankNodeId) internal view returns (uint256) {\\n        return\\n            rewardsToken.balanceOf(\\n                _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(bankNodeId))\\n            );\\n    }\\n\\n    function getBNPLTokenDistribution(uint256 amount) public view returns (uint256[] memory) {\\n        uint32 nodeCount = bankNodeManager.bankNodeCount();\\n        uint256[] memory bnplTokensPerNode = new uint256[](nodeCount);\\n        uint32 i = 0;\\n        uint256 amt = 0;\\n        uint256 total = 0;\\n        while (i < nodeCount) {\\n            amt = rewardsToken.balanceOf(\\n                _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(i + 1))\\n            );\\n            bnplTokensPerNode[i] = amt;\\n            total += amt;\\n            i += 1;\\n        }\\n        i = 0;\\n        while (i < nodeCount) {\\n            bnplTokensPerNode[i] = (bnplTokensPerNode[i] * amount) / total;\\n            i += 1;\\n        }\\n        return bnplTokensPerNode;\\n    }\\n\\n    function distributeBNPLTokensToBankNodes(uint256 amount)\\n        public\\n        onlyRole(REWARDS_DISTRIBUTOR_ROLE)\\n        returns (uint256)\\n    {\\n        require(amount > 0, \\\"cannot send 0\\\");\\n        rewardsToken.safeTransferFrom(msg.sender, address(this), amount);\\n        uint32 nodeCount = bankNodeManager.bankNodeCount();\\n        uint256[] memory bnplTokensPerNode = new uint256[](nodeCount);\\n        uint32 i = 0;\\n        uint256 amt = 0;\\n        uint256 total = 0;\\n        while (i < nodeCount) {\\n            amt = rewardsToken.balanceOf(\\n                _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(i + 1))\\n            );\\n            bnplTokensPerNode[i] = amt;\\n            total += amt;\\n            i += 1;\\n        }\\n        i = 0;\\n        while (i < nodeCount) {\\n            amt = (bnplTokensPerNode[i] * amount) / total;\\n            if (amt != 0) {\\n                _notifyRewardAmount(i + 1, amt);\\n            }\\n            i += 1;\\n        }\\n        return total;\\n    }\\n\\n    function distributeBNPLTokensToBankNodes2(uint256 amount)\\n        public\\n        onlyRole(REWARDS_DISTRIBUTOR_ROLE)\\n        returns (uint256)\\n    {\\n        uint32 nodeCount = bankNodeManager.bankNodeCount();\\n        uint32 i = 0;\\n        uint256 amt = 0;\\n        uint256 total = 0;\\n        while (i < nodeCount) {\\n            total += rewardsToken.balanceOf(\\n                _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(i + 1))\\n            );\\n            i += 1;\\n        }\\n        i = 0;\\n        while (i < nodeCount) {\\n            amt =\\n                (rewardsToken.balanceOf(\\n                    _ensureContractAddressNot0(bankNodeManager.getBankNodeStakingPoolContract(i + 1))\\n                ) * amount) /\\n                total;\\n            if (amt != 0) {\\n                _notifyRewardAmount(i + 1, amt);\\n            }\\n            i += 1;\\n        }\\n        return total;\\n    }\\n}\\n\",\"keccak256\":\"0x98683c52fe791b406c514661f41da8d8a73077011f42cb92bfe3f6045339d0e9\",\"license\":\"MIT\"},\"src/Rewards/PlatformRewards/BankNodeRewardSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n\\nBorrowed heavily from Synthetix\\n\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2021 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../../Management/IBankNodeManager.sol\\\";\\n\\ncontract BankNodeRewardSystem is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    bytes32 public constant REWARDS_DISTRIBUTOR_ROLE = keccak256(\\\"REWARDS_DISTRIBUTOR_ROLE\\\");\\n    bytes32 public constant REWARDS_DISTRIBUTOR_ADMIN_ROLE = keccak256(\\\"REWARDS_DISTRIBUTOR_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant REWARDS_MANAGER = keccak256(\\\"REWARDS_MANAGER_ROLE\\\");\\n    bytes32 public constant REWARDS_MANAGER_ROLE_ADMIN = keccak256(\\\"REWARDS_MANAGER_ROLE_ADMIN\\\");\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    mapping(uint32 => uint256) public periodFinish;\\n    mapping(uint32 => uint256) public rewardRate;\\n    mapping(uint32 => uint256) public rewardsDuration;\\n    mapping(uint32 => uint256) public lastUpdateTime;\\n    mapping(uint32 => uint256) public rewardPerTokenStored;\\n\\n    mapping(uint256 => uint256) public userRewardPerTokenPaid;\\n    mapping(uint256 => uint256) public rewards;\\n    mapping(uint32 => uint256) public _totalSupply;\\n    mapping(uint256 => uint256) private _balances;\\n\\n    IBankNodeManager public bankNodeManager;\\n    IERC20 public rewardsToken;\\n    uint256 public defaultRewardsDuration;\\n\\n    /* ========== INIT ========== */\\n    function _BankNodesRewardSystem_init_(\\n        uint256 _defaultRewardsDuration,\\n        address _rewardsToken,\\n        address _bankNodeManager,\\n        address distributorAdmin,\\n        address managerAdmin\\n    ) internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        rewardsToken = IERC20(_rewardsToken);\\n        bankNodeManager = IBankNodeManager(_bankNodeManager);\\n        defaultRewardsDuration = _defaultRewardsDuration;\\n\\n        _setupRole(REWARDS_DISTRIBUTOR_ROLE, _bankNodeManager);\\n        _setupRole(REWARDS_DISTRIBUTOR_ROLE, distributorAdmin);\\n        _setupRole(REWARDS_DISTRIBUTOR_ADMIN_ROLE, distributorAdmin);\\n        _setRoleAdmin(REWARDS_DISTRIBUTOR_ROLE, REWARDS_DISTRIBUTOR_ADMIN_ROLE);\\n\\n        _setupRole(REWARDS_MANAGER, _bankNodeManager);\\n        _setupRole(REWARDS_MANAGER, managerAdmin);\\n        _setupRole(REWARDS_MANAGER_ROLE_ADMIN, managerAdmin);\\n        _setRoleAdmin(REWARDS_MANAGER, REWARDS_MANAGER_ROLE_ADMIN);\\n    }\\n\\n    function encodeUserBankNodeKey(address user, uint32 bankNodeId) public pure returns (uint256) {\\n        return (uint256(uint160(user)) << 32) | uint256(bankNodeId);\\n    }\\n\\n    function decodeUserBankNodeKey(uint256 stakingVaultKey) public pure returns (address user, uint32 bankNodeId) {\\n        bankNodeId = uint32(stakingVaultKey & 0xffffffff);\\n        user = address(uint160(stakingVaultKey >> 32));\\n    }\\n\\n    function encodeVaultValue(uint256 amount, uint40 depositTime) public pure returns (uint256) {\\n        require(\\n            amount <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff,\\n            \\\"cannot encode amount larger than 2^216-1\\\"\\n        );\\n        return (amount << 40) | uint256(depositTime);\\n    }\\n\\n    function decodeVaultValue(uint256 vaultValue) public pure returns (uint256 amount, uint40 depositTime) {\\n        depositTime = uint40(vaultValue & 0xffffffffff);\\n        amount = vaultValue >> 40;\\n    }\\n\\n    function _ensureAddressIERC20Not0(address tokenAddress) internal pure returns (IERC20) {\\n        require(tokenAddress != address(0), \\\"invalid token address!\\\");\\n        return IERC20(tokenAddress);\\n    }\\n\\n    function _ensureContractAddressNot0(address contractAddress) internal pure returns (address) {\\n        require(contractAddress != address(0), \\\"invalid token address!\\\");\\n        return contractAddress;\\n    }\\n\\n    function getStakingTokenForBankNode(uint32 bankNodeId) internal view returns (IERC20) {\\n        return _ensureAddressIERC20Not0(bankNodeManager.getBankNodeToken(bankNodeId));\\n    }\\n\\n    function getInternalValueForStakedTokenAmount(uint256 amount) internal pure returns (uint256) {\\n        return amount;\\n    }\\n\\n    function getStakedTokenAmountForInternalValue(uint256 amount) internal pure returns (uint256) {\\n        return amount;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply(uint32 bankNodeId) external view returns (uint256) {\\n        return getStakedTokenAmountForInternalValue(_totalSupply[bankNodeId]);\\n    }\\n\\n    function balanceOf(address account, uint32 bankNodeId) external view returns (uint256) {\\n        return getStakedTokenAmountForInternalValue(_balances[encodeUserBankNodeKey(account, bankNodeId)]);\\n    }\\n\\n    function lastTimeRewardApplicable(uint32 bankNodeId) public view returns (uint256) {\\n        return block.timestamp < periodFinish[bankNodeId] ? block.timestamp : periodFinish[bankNodeId];\\n    }\\n\\n    function rewardPerToken(uint32 bankNodeId) public view returns (uint256) {\\n        if (_totalSupply[bankNodeId] == 0) {\\n            return rewardPerTokenStored[bankNodeId];\\n        }\\n        return\\n            rewardPerTokenStored[bankNodeId].add(\\n                lastTimeRewardApplicable(bankNodeId)\\n                    .sub(lastUpdateTime[bankNodeId])\\n                    .mul(rewardRate[bankNodeId])\\n                    .mul(1e18)\\n                    .div(_totalSupply[bankNodeId])\\n            );\\n\\n        /*\\n        return\\n            rewardPerTokenStored[bankNodeId] +\\n            (lastTimeRewardApplicable(bankNodeId) -\\n                ((lastUpdateTime[bankNodeId] * rewardRate[bankNodeId] * 1e18) / (_totalSupply[bankNodeId])));*/\\n    }\\n\\n    function earned(address account, uint32 bankNodeId) public view returns (uint256) {\\n        uint256 key = encodeUserBankNodeKey(account, bankNodeId);\\n        return\\n            ((_balances[key] * (rewardPerToken(bankNodeId) - (userRewardPerTokenPaid[key]))) / 1e18) + (rewards[key]);\\n    }\\n\\n    function getRewardForDuration(uint32 bankNodeId) external view returns (uint256) {\\n        return rewardRate[bankNodeId] * rewardsDuration[bankNodeId];\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint32 bankNodeId, uint256 tokenAmount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updateReward(msg.sender, bankNodeId)\\n    {\\n        require(tokenAmount > 0, \\\"Cannot stake 0\\\");\\n        uint256 amount = getInternalValueForStakedTokenAmount(tokenAmount);\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        require(getStakedTokenAmountForInternalValue(amount) == tokenAmount, \\\"token amount too high!\\\");\\n        _totalSupply[bankNodeId] += amount;\\n        _balances[encodeUserBankNodeKey(msg.sender, bankNodeId)] += amount;\\n        getStakingTokenForBankNode(bankNodeId).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n        emit Staked(msg.sender, bankNodeId, tokenAmount);\\n    }\\n\\n    function withdraw(uint32 bankNodeId, uint256 tokenAmount) public nonReentrant updateReward(msg.sender, bankNodeId) {\\n        require(tokenAmount > 0, \\\"Cannot withdraw 0\\\");\\n        uint256 amount = getInternalValueForStakedTokenAmount(tokenAmount);\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(getStakedTokenAmountForInternalValue(amount) == tokenAmount, \\\"token amount too high!\\\");\\n\\n        _totalSupply[bankNodeId] -= amount;\\n        _balances[encodeUserBankNodeKey(msg.sender, bankNodeId)] -= amount;\\n        getStakingTokenForBankNode(bankNodeId).safeTransfer(msg.sender, tokenAmount);\\n        emit Withdrawn(msg.sender, bankNodeId, tokenAmount);\\n    }\\n\\n    function getReward(uint32 bankNodeId) public nonReentrant updateReward(msg.sender, bankNodeId) {\\n        uint256 reward = rewards[encodeUserBankNodeKey(msg.sender, bankNodeId)];\\n\\n        if (reward > 0) {\\n            rewards[encodeUserBankNodeKey(msg.sender, bankNodeId)] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, bankNodeId, reward);\\n        }\\n    }\\n\\n    function exit(uint32 bankNodeId) external {\\n        withdraw(\\n            bankNodeId,\\n            getStakedTokenAmountForInternalValue(_balances[encodeUserBankNodeKey(msg.sender, bankNodeId)])\\n        );\\n        getReward(bankNodeId);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function _notifyRewardAmount(uint32 bankNodeId, uint256 reward) internal updateReward(address(0), bankNodeId) {\\n        if (rewardsDuration[bankNodeId] == 0) {\\n            rewardsDuration[bankNodeId] = defaultRewardsDuration;\\n        }\\n        if (block.timestamp >= periodFinish[bankNodeId]) {\\n            rewardRate[bankNodeId] = reward / (rewardsDuration[bankNodeId]);\\n        } else {\\n            uint256 remaining = periodFinish[bankNodeId] - (block.timestamp);\\n            uint256 leftover = remaining * (rewardRate[bankNodeId]);\\n            rewardRate[bankNodeId] = (reward + leftover) / (rewardsDuration[bankNodeId]);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = getInternalValueForStakedTokenAmount(\\n            getStakingTokenForBankNode(bankNodeId).balanceOf(address(this))\\n        );\\n        require(rewardRate[bankNodeId] <= (balance / rewardsDuration[bankNodeId]), \\\"Provided reward too high\\\");\\n\\n        lastUpdateTime[bankNodeId] = block.timestamp;\\n        periodFinish[bankNodeId] = block.timestamp + (rewardsDuration[bankNodeId]);\\n        emit RewardAdded(bankNodeId, reward);\\n    }\\n\\n    function notifyRewardAmount(uint32 bankNodeId, uint256 reward) external onlyRole(REWARDS_DISTRIBUTOR_ROLE) {\\n        _notifyRewardAmount(bankNodeId, reward);\\n    }\\n\\n    /*\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external {\\n        require(tokenAddress != address(stakingToken[]), \\\"Cannot withdraw the staking token\\\");\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n*/\\n    function setRewardsDuration(uint32 bankNodeId, uint256 _rewardsDuration) external onlyRole(REWARDS_MANAGER) {\\n        require(\\n            block.timestamp > periodFinish[bankNodeId],\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration[bankNodeId] = _rewardsDuration;\\n        emit RewardsDurationUpdated(bankNodeId, rewardsDuration[bankNodeId]);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account, uint32 bankNodeId) {\\n        if (rewardsDuration[bankNodeId] == 0) {\\n            rewardsDuration[bankNodeId] = defaultRewardsDuration;\\n        }\\n        rewardPerTokenStored[bankNodeId] = rewardPerToken(bankNodeId);\\n        lastUpdateTime[bankNodeId] = lastTimeRewardApplicable(bankNodeId);\\n        if (account != address(0)) {\\n            uint256 key = encodeUserBankNodeKey(msg.sender, bankNodeId);\\n            rewards[key] = earned(msg.sender, bankNodeId);\\n            userRewardPerTokenPaid[key] = rewardPerTokenStored[bankNodeId];\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint32 indexed bankNodeId, uint256 reward);\\n    event Staked(address indexed user, uint32 indexed bankNodeId, uint256 amount);\\n    event Withdrawn(address indexed user, uint32 indexed bankNodeId, uint256 amount);\\n    event RewardPaid(address indexed user, uint32 indexed bankNodeId, uint256 reward);\\n    event RewardsDurationUpdated(uint32 indexed bankNodeId, uint256 newDuration);\\n}\\n\",\"keccak256\":\"0x067e075b3ee1a25cded7ebbd0ea5d9eca26c00a514dbd3b3b86aee6be32bfc7b\",\"license\":\"MIT\"},\"src/SwapMarket/IBNPLSwapMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the IBNPLSwapMarket standard \\n */\\ninterface IBNPLSwapMarket {\\n    /// @title Router token swapping functionality\\n    /// @notice Functions for swapping tokens via Uniswap V3\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n   \\n}\\n\",\"keccak256\":\"0x7c2807ed8e925ee778979d493ca55d37edddd797af8c27334913a1aa553c9118\",\"license\":\"MIT\"},\"src/Utils/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3d947fc4fbe7a3b691fbe777c3a530674e1691db24612a3c8aa4dbc1387c8b08\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613bbb806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620002015760003560e01c8063a217fddf1162000119578063cc98437511620000af578063dedc8d07116200007a578063dedc8d071462000515578063e8288695146200051f578063ee7bd9851462000536578063f5efbb4f146200054d57600080fd5b8063cc98437514620004bb578063cf65b30b14620004d0578063d547741f14620004e7578063d84c676414620004fe57600080fd5b8063c972898b11620000f0578063c972898b1462000464578063c9a3f180146200047b578063ca15c873146200048d578063cbe9889314620004a457600080fd5b8063a217fddf146200040b578063ae12b71d1462000414578063be203094146200044d57600080fd5b806336568abe116200019b5780637e2e610e11620001665780637e2e610e14620003975780639010d07c14620003c657806391d1485414620003dd578063a0407e1414620003f457600080fd5b806336568abe14620003045780633926b03e146200031b57806348e3eb331462000351578063504ecd74146200036857600080fd5b8063146b7d8711620001dc578063146b7d871462000297578063248a9ca314620002b05780632e7596e714620002d65780632f2ff15d14620002ed57600080fd5b8063016d4cb8146200020657806301ffc9a714620002495780630d14f57b1462000271575b600080fd5b6200022f620002173660046200292e565b60fe6020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b620002606200025a36600462002abc565b62000562565b604051901515815260200162000240565b62000288620002823660046200294d565b62000590565b60405190815260200162000240565b620002ae620002a836600462002b5e565b6200090b565b005b62000288620002c136600462002a4f565b60009081526065602052604090206001015490565b620002ae620002e7366004620029f4565b62000cfb565b620002ae620002fe36600462002a68565b62000d98565b620002ae6200031536600462002a68565b62000dc3565b61010054620003389064010000000090046001600160a01b031681565b6040516001600160a01b03909116815260200162000240565b6200028860008051602062003b6683398151915281565b6200037f6200037936600462002be4565b62000de9565b604051620002409a9998979695949392919062002cec565b620003ae620003a83660046200292e565b62000f84565b604051620002409a9998979695949392919062002d80565b62000338620003d736600462002a9a565b6200108b565b62000260620003ee36600462002a68565b620010ac565b620003386200040536600462002be4565b620010d7565b62000288600081565b6200043a620004253660046200292e565b60fb6020526000908152604090205460ff1681565b60405160ff909116815260200162000240565b620002ae6200045e36600462002ae6565b6200113f565b620002886200047536600462002be4565b620014da565b610100546200022f9063ffffffff1681565b620002886200049e36600462002a4f565b6200151a565b62000338620004b536600462002be4565b62001533565b6101015462000338906001600160a01b031681565b62000338620004e136600462002be4565b6200159e565b620002ae620004f836600462002a68565b62001609565b620002ae6200050f36600462002a4f565b62001615565b6200028860ff5481565b620003386200053036600462002be4565b62001637565b620003386200054736600462002be4565b620016a2565b6101025462000338906001600160a01b031681565b60006001600160e01b03198216635a05180f60e01b14806200058a57506200058a826200170d565b92915050565b6000600260c9541415620005c15760405162461bcd60e51b8152600401620005b89062002f0f565b60405180910390fd5b600260c95560ff548710801590620005d95750600087115b620006275760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820746f6b656e7320626f6e64656400000000000000006044820152606401620005b8565b6001600160a01b038816620006765760405162461bcd60e51b815260206004820152601460248201527306f70657261746f722063616e6e6f7420626520360641b6044820152606401620005b8565b6001600160a01b038616620006ce5760405162461bcd60e51b815260206004820181905260248201527f6c656e6461626c65546f6b656e416464726573732063616e6e6f7420626520306044820152606401620005b8565b61010054620006e59063ffffffff166001620030c6565b610100805463ffffffff191663ffffffff929092169182179055600080808062000713858e808f8f62001744565b9350935093509350600060fd60008763ffffffff1663ffffffff16815260200190815260200160002090508560fe6000876001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550848160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550838160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550818160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b8160040160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550338160050160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550858160050160146101000a81548163ffffffff021916908363ffffffff160217905550428160050160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508a8a826006019190620008db92919062002819565b50620008ec600782018a8a62002819565b5050600160c955505063ffffffff9092169a9950505050505050505050565b600260c9541415620009315760405162461bcd60e51b8152600401620005b89062002f0f565b600260c95560008051602062003b6683398151915262000952813362001e81565b60006200096360208501856200292e565b6001600160a01b03161415620009bc5760405162461bcd60e51b815260206004820152601b60248201527f746f6b656e436f6e7472616374206d757374206e6f74206265203000000000006044820152606401620005b8565b6000620009d060408501602086016200292e565b6001600160a01b0316141562000a295760405162461bcd60e51b815260206004820152601860248201527f737761704d61726b6574206d757374206e6f74206265203000000000000000006044820152606401620005b8565b600083608001351162000a7f5760405162461bcd60e51b815260206004820152601b60248201527f76616c75654d756c7469706c696572206d757374206265203e203000000000006044820152606401620005b8565b60ff8216158062000a9357508160ff166001145b62000ad25760405162461bcd60e51b815260206004820152600e60248201526d0656e61626c65642031206f7220360941b6044820152606401620005b8565b600060fc8162000ae660208701876200292e565b6001600160a01b03168152602080820192909252604001600020915062000b10908501856200292e565b81546001600160a01b0319166001600160a01b039190911617815562000b3d60408501602086016200292e565b6001820180546001600160a01b0319166001600160a01b039290921691909117905562000b71606085016040860162002bbf565b60018201805462ffffff92909216600160a01b0262ffffff60a01b1990921691909117905562000ba8608085016060860162002c0a565b60018201805460ff92909216600160b81b0260ff60b81b199092169190911790556080840135600282015562000be560c0850160a0860162002b9b565b60038201805461ffff191661ffff9290921691909117905562000c0f60e0850160c086016200292e565b6003820180546001600160a01b0392909216620100000262010000600160b01b031990921691909117905562000c4d610100850160e086016200292e565b6004820180546001600160a01b0319166001600160a01b039290921691909117905562000c7f61010085018562003063565b62000c8f91600584019162002819565b5062000ca061012085018562003063565b62000cb091600684019162002819565b508260fb600062000cc560208801886200292e565b6001600160a01b031681526020810191909152604001600020805460ff191660ff929092169190911790555050600160c9555050565b60008051602062003b6683398151915262000d17813362001e81565b60ff8216158062000d2b57508160ff166001145b62000d6a5760405162461bcd60e51b815260206004820152600e60248201526d0656e61626c65642031206f7220360941b6044820152606401620005b8565b506001600160a01b0391909116600090815260fb60205260409020805460ff191660ff909216919091179055565b62000da4828262001ef4565b600082815260976020526040902062000dbe908262001f1e565b505050565b62000dcf828262001f35565b600082815260976020526040902062000dbe908262001fb3565b60fd6020526000908152604090208054600182015460028301546003840154600485015460058601546006870180546001600160a01b03978816989688169795861696948616959384169493831693600160a01b840463ffffffff1693600160c01b900467ffffffffffffffff1692909162000e65906200317a565b80601f016020809104026020016040519081016040528092919081815260200182805462000e93906200317a565b801562000ee45780601f1062000eb85761010080835404028352916020019162000ee4565b820191906000526020600020905b81548152906001019060200180831162000ec657829003601f168201915b50505050509080600701805462000efb906200317a565b80601f016020809104026020016040519081016040528092919081815260200182805462000f29906200317a565b801562000f7a5780601f1062000f4e5761010080835404028352916020019162000f7a565b820191906000526020600020905b81548152906001019060200180831162000f5c57829003601f168201915b505050505090508a565b60fc602052600090815260409020805460018201546002830154600384015460048501546005860180546001600160a01b039687169787871697600160a01b880462ffffff1697600160b81b900460ff16969561ffff8116956201000090910482169491169262000ff5906200317a565b80601f016020809104026020016040519081016040528092919081815260200182805462001023906200317a565b8015620010745780601f10620010485761010080835404028352916020019162001074565b820191906000526020600020905b8154815290600101906020018083116200105657829003601f168201915b50505050509080600601805462000efb906200317a565b6000828152609760205260408120620010a5908362001fca565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600060018263ffffffff1610158015620010fe57506101005463ffffffff90811690831611155b6200111d5760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020546001600160a01b031690565b600054610100900460ff168062001159575060005460ff16155b620011785760405162461bcd60e51b8152600401620005b89062002e7c565b600054610100900460ff161580156200119b576000805461ffff19166101011790555b600260c9541415620011c15760405162461bcd60e51b8152600401620005b89062002f0f565b600260c9556001600160a01b0385166200121e5760405162461bcd60e51b815260206004820152601b60248201527f5f70726f746f636f6c436f6e6669672063616e6e6f74206265203000000000006044820152606401620005b8565b6001600160a01b038416620012765760405162461bcd60e51b815260206004820152601960248201527f5f636f6e666967757261746f722063616e6e6f742062652030000000000000006044820152606401620005b8565b60008311620012d95760405162461bcd60e51b815260206004820152602860248201527f5f6d696e696d756d42616e6b4e6f6465426f6e646564416d6f756e742063616e60448201526706e6f7420626520360c41b6064820152608401620005b8565b620012e362001fd8565b620012ed62001fd8565b620012f762001fd8565b6200130162001fd8565b6200130b6200204a565b61010280546001600160a01b0319166001600160a01b03871690811790915560ff849055610100805463ffffffff1916905560408051631c93581f60e11b81529051633926b03e91600480820192602092909190829003018186803b1580156200137457600080fd5b505afa15801562001389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013af919062002b3f565b6101008054640100000000600160c01b0319166401000000006001600160a01b0393841681029190911791829055900416620014275760405162461bcd60e51b815260206004820152601660248201527505f626e706c546f6b656e2063616e6e6f7420626520360541b6044820152606401620005b8565b61010180546001600160a01b0319166001600160a01b038416908117909155620014a05760405162461bcd60e51b815260206004820152602360248201527f5f62616e6b4e6f64654c656e64696e67526577617264732063616e6e6f74206260448201526206520360ec1b6064820152608401620005b8565b620014bb60008051602062003b6683398151915285620020c0565b600160c9558015620014d3576000805461ff00191690555b5050505050565b600060018263ffffffff16101580156200150157506101005463ffffffff90811690831611155b6200150e57600062001511565b60015b60ff1692915050565b60008181526097602052604081206200058a90620020cc565b600060018263ffffffff16101580156200155a57506101005463ffffffff90811690831611155b620015795760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020600101546001600160a01b031690565b600060018263ffffffff1610158015620015c557506101005463ffffffff90811690831611155b620015e45760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020600401546001600160a01b031690565b62000dcf8282620020d7565b60008051602062003b6683398151915262001631813362001e81565b5060ff55565b600060018263ffffffff16101580156200165e57506101005463ffffffff90811690831611155b6200167d5760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020600301546001600160a01b031690565b600060018263ffffffff1610158015620016c957506101005463ffffffff90811690831611155b620016e85760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020600201546001600160a01b031690565b60006001600160e01b03198216637965db0b60e01b14806200058a57506301ffc9a760e01b6001600160e01b03198316146200058a565b60008080806001600160a01b038516620017a15760405162461bcd60e51b815260206004820181905260248201527f6c656e6461626c65546f6b656e416464726573732063616e6e6f7420626520306044820152606401620005b8565b6001600160a01b03858116600090815260fc60209081526040808320815161014081018352815486168152600182015480871694820194909452600160a01b840462ffffff1692810192909252600160b81b90920460ff16606082015260028201546080820152600382015461ffff811660a0830152620100009004841660c0820152600482015490931660e0840152600581018054929392610100840191906200184c906200317a565b80601f01602080910402602001604051908101604052809291908181526020018280546200187a906200317a565b8015620018cb5780601f106200189f57610100808354040283529160200191620018cb565b820191906000526020600020905b815481529060010190602001808311620018ad57829003601f168201915b50505050508152602001600682018054620018e6906200317a565b80601f016020809104026020016040519081016040528092919081815260200182805462001914906200317a565b8015620019655780601f10620019395761010080835404028352916020019162001965565b820191906000526020600020905b8154815290600101906020018083116200194757829003601f168201915b5050505050815250509050856001600160a01b031681600001516001600160a01b03161480156200199a575060008160800151115b620019e15760405162461bcd60e51b815260206004820152601660248201527534b73b30b634b2103632b73230b13632903a37b5b2b760511b6044820152606401620005b8565b6001600160a01b038616600090815260fb602052604090205460ff1660011462001a4e5760405162461bcd60e51b815260206004820152601a60248201527f6c656e6461626c6520746f6b656e206e6f7420656e61626c65640000000000006044820152606401620005b8565b61010260009054906101000a90046001600160a01b03166001600160a01b031663ed7b60f26040518163ffffffff1660e01b815260040160206040518083038186803b15801562001a9e57600080fd5b505afa15801562001ab3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ad9919062002b3f565b60405162001ae790620028a8565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562001b23573d6000803e3d6000fd5b50945061010260009054906101000a90046001600160a01b03166001600160a01b031663ba33a0506040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b7657600080fd5b505afa15801562001b8b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bb1919062002b3f565b60405162001bbf90620028a8565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562001bfb573d6000803e3d6000fd5b50925062001c5a6040518060400160405280601681526020017510985b9ada5b99c8139bd91948141bdbdb081093941360521b815250604051806040016040528060058152602001641c1093941360da1b815250601260008762002101565b6101005490925062001c809064010000000090046001600160a01b031633858a62002228565b61010054604051637b809f7b60e11b81526401000000009091046001600160a01b039081166004830152838116602483015286811660448301523360648301526084820189905284169063f7013ef69060a401600060405180830381600087803b15801562001cee57600080fd5b505af115801562001d03573d6000803e3d6000fd5b505050610120820151606083015162001d229250819060008962002101565b9350846001600160a01b031663485e4344604051806101a001604052808d63ffffffff168152602001846040015162ffffff168152602001306001600160a01b031681526020018c6001600160a01b031681526020018b6001600160a01b0316815260200161010060049054906101000a90046001600160a01b03166001600160a01b0316815260200184602001516001600160a01b031681526020018460a0015161ffff1681526020018460c001516001600160a01b031681526020018460e001516001600160a01b03168152602001866001600160a01b0316815260200184600001516001600160a01b03168152602001876001600160a01b03168152506040518263ffffffff1660e01b815260040162001e40919062002f46565b600060405180830381600087803b15801562001e5b57600080fd5b505af115801562001e70573d6000803e3d6000fd5b505050505095509550955095915050565b62001e8d8282620010ac565b62001ef05762001ea8816001600160a01b0316601462002370565b62001eb583602062002370565b60405160200162001ec892919062002c73565b60408051601f198184030181529082905262461bcd60e51b8252620005b89160040162002e13565b5050565b60008281526065602052604090206001015462001f12813362001e81565b62000dbe838362002566565b6000620010a5836001600160a01b038416620025f0565b6001600160a01b038116331462001fa75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401620005b8565b62001ef0828262002642565b6000620010a5836001600160a01b038416620026ac565b6000620010a58383620027d4565b600054610100900460ff168062001ff2575060005460ff16155b620020115760405162461bcd60e51b8152600401620005b89062002e7c565b600054610100900460ff1615801562002034576000805461ffff19166101011790555b801562002047576000805461ff00191690555b50565b600054610100900460ff168062002064575060005460ff16155b620020835760405162461bcd60e51b8152600401620005b89062002e7c565b600054610100900460ff16158015620020a6576000805461ffff19166101011790555b600160c955801562002047576000805461ff001916905550565b62000da482826200280d565b60006200058a825490565b600082815260656020526040902060010154620020f5813362001e81565b62000dbe838362002642565b60008061010260009054906101000a90046001600160a01b03166001600160a01b031663e37b6a906040518163ffffffff1660e01b815260040160206040518083038186803b1580156200215457600080fd5b505afa15801562002169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200218f919062002b3f565b60405163641078a360e11b90620021b3908a908a908a908a908a9060240162002e28565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051620021f290620028a8565b620021ff92919062002de5565b604051809103906000f0801580156200221c573d6000803e3d6000fd5b50979650505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916200228e919062002c55565b6000604051808303816000865af19150503d8060008114620022cd576040519150601f19603f3d011682016040523d82523d6000602084013e620022d2565b606091505b5091509150818015620023005750805115806200230057508080602001905181019062002300919062002a2d565b620023685760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401620005b8565b505050505050565b6060600062002381836002620030f1565b6200238e906002620030ab565b67ffffffffffffffff811115620023b557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620023e0576020820181803683370190505b509050600360fc1b816000815181106200240a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200244857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006200246e846002620030f1565b6200247b906001620030ab565b90505b600181111562002515576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620024bf57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110620024e457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936200250d8162003160565b90506200247e565b508315620010a55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620005b8565b620025728282620010ac565b62001ef05760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620025ac3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205462002639575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200058a565b5060006200058a565b6200264e8282620010ac565b1562001ef05760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015620027c9576000620026d360018362003113565b8554909150600090620026e99060019062003113565b90508181146200276d5760008660000182815481106200271957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106200274b57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806200278d57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506200058a565b60009150506200058a565b6000826000018281548110620027fa57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b62001ef0828262002566565b82805462002827906200317a565b90600052602060002090601f0160209004810192826200284b576000855562002896565b82601f10620028665782800160ff1982351617855562002896565b8280016001018555821562002896579182015b828111156200289657823582559160200191906001019062002879565b50620028a4929150620028b6565b5090565b61098280620031e483390190565b5b80821115620028a45760008155600101620028b7565b60008083601f840112620028df578182fd5b50813567ffffffffffffffff811115620028f7578182fd5b6020830191508360208285010111156200291057600080fd5b9250929050565b803560ff811681146200292957600080fd5b919050565b60006020828403121562002940578081fd5b8135620010a581620031cd565b600080600080600080600060a0888a03121562002968578283fd5b87356200297581620031cd565b96506020880135955060408801356200298e81620031cd565b9450606088013567ffffffffffffffff80821115620029ab578485fd5b620029b98b838c01620028cd565b909650945060808a0135915080821115620029d2578384fd5b50620029e18a828b01620028cd565b989b979a50959850939692959293505050565b6000806040838503121562002a07578182fd5b823562002a1481620031cd565b915062002a246020840162002917565b90509250929050565b60006020828403121562002a3f578081fd5b81518015158114620010a5578182fd5b60006020828403121562002a61578081fd5b5035919050565b6000806040838503121562002a7b578182fd5b82359150602083013562002a8f81620031cd565b809150509250929050565b6000806040838503121562002aad578182fd5b50508035926020909101359150565b60006020828403121562002ace578081fd5b81356001600160e01b031981168114620010a5578182fd5b6000806000806080858703121562002afc578384fd5b843562002b0981620031cd565b9350602085013562002b1b81620031cd565b925060408501359150606085013562002b3481620031cd565b939692955090935050565b60006020828403121562002b51578081fd5b8151620010a581620031cd565b6000806040838503121562002b71578182fd5b823567ffffffffffffffff81111562002b88578283fd5b8301610140818603121562002a14578283fd5b60006020828403121562002bad578081fd5b813561ffff81168114620010a5578182fd5b60006020828403121562002bd1578081fd5b813562ffffff81168114620010a5578182fd5b60006020828403121562002bf6578081fd5b813563ffffffff81168114620010a5578182fd5b60006020828403121562002c1c578081fd5b620010a58262002917565b6000815180845262002c418160208601602086016200312d565b601f01601f19169290920160200192915050565b6000825162002c698184602087016200312d565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162002cad8160178501602088016200312d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162002ce08160288401602088016200312d565b01602801949350505050565b6001600160a01b038b811682528a81166020830152898116604083015288811660608301528781166080830152861660a082015263ffffffff851660c082015267ffffffffffffffff841660e0820152610140610100820181905260009062002d588382018662002c27565b905082810361012084015262002d6f818562002c27565b9d9c50505050505050505050505050565b6001600160a01b038b811682528a8116602083015262ffffff8a16604083015260ff891660608301526080820188905261ffff871660a083015285811660c0830152841660e0820152610140610100820181905260009062002d588382018662002c27565b6001600160a01b038316815260406020820181905260009062002e0b9083018462002c27565b949350505050565b602081526000620010a5602083018462002c27565b60a08152600062002e3d60a083018862002c27565b828103602084015262002e51818862002c27565b60ff96909616604084015250506001600160a01b039283166060820152911660809091015292915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526025908201527f496e76616c6964206f7220756e726567697374657265642062616e6b206e6f64604082015264652069642160d81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815163ffffffff1681526101a08101602083015162002f6c602084018262ffffff169052565b50604083015162002f8860408401826001600160a01b03169052565b50606083015162002fa460608401826001600160a01b03169052565b50608083015162002fc060808401826001600160a01b03169052565b5060a083015162002fdc60a08401826001600160a01b03169052565b5060c083015162002ff860c08401826001600160a01b03169052565b5060e08301516200300f60e084018261ffff169052565b50610100838101516001600160a01b03908116918401919091526101208085015182169084015261014080850151821690840152610160808501518216908401526101809384015116929091019190915290565b6000808335601e198436030181126200307a578283fd5b83018035915067ffffffffffffffff82111562003095578283fd5b6020019150368190038213156200291057600080fd5b60008219821115620030c157620030c1620031b7565b500190565b600063ffffffff808316818516808303821115620030e857620030e8620031b7565b01949350505050565b60008160001904831182151516156200310e576200310e620031b7565b500290565b600082821015620031285762003128620031b7565b500390565b60005b838110156200314a57818101518382015260200162003130565b838111156200315a576000848401525b50505050565b600081620031725762003172620031b7565b506000190190565b600181811c908216806200318f57607f821691505b60208210811415620031b157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146200204757600080fdfe60806040526040516109823803806109828339810160408190526100229161047d565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51610588565b60008051602061093b8339815191521461007757634e487b7160e01b600052600160045260246000fd5b6100838282600061008a565b50506105ed565b61009383610164565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100d45750805b1561015f5761015d836001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011557600080fd5b505afa158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d9190610463565b8361030460201b6100291760201c565b505b505050565b6101778161033060201b6100551760201c565b6101d65760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610259816001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021257600080fd5b505afa158015610226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024a9190610463565b61033060201b6100551760201c565b6102be5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016101cd565b806102e360008051602061093b83398151915260001b61033660201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060610329838360405180606001604052806027815260200161095b60279139610339565b9392505050565b3b151590565b90565b6060833b6103985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101cd565b600080856001600160a01b0316856040516103b39190610539565b600060405180830381855af49150503d80600081146103ee576040519150601f19603f3d011682016040523d82523d6000602084013e6103f3565b606091505b50909250905061040482828661040e565b9695505050505050565b6060831561041d575081610329565b82511561042d5782518084602001fd5b8160405162461bcd60e51b81526004016101cd9190610555565b80516001600160a01b038116811461045e57600080fd5b919050565b600060208284031215610474578081fd5b61032982610447565b6000806040838503121561048f578081fd5b61049883610447565b60208401519092506001600160401b03808211156104b4578283fd5b818501915085601f8301126104c7578283fd5b8151818111156104d9576104d96105d7565b604051601f8201601f19908116603f01168101908382118183101715610501576105016105d7565b81604052828152886020848701011115610519578586fd5b61052a8360208301602088016105ab565b80955050505050509250929050565b6000825161054b8184602087016105ab565b9190910192915050565b60208152600082518060208401526105748160408501602087016105ab565b601f01601f19169190910160400192915050565b6000828210156105a657634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156105c65781810151838201526020016105ae565b8381111561015d5750506000910152565b634e487b7160e01b600052604160045260246000fd5b61033f806105fc6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b610106565b565b606061004e83836040518060600160405280602781526020016102e36027913961012a565b9392505050565b3b151590565b90565b60006100917fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100c957600080fd5b505afa1580156100dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610101919061023c565b905090565b3660008037600080366000845af43d6000803e808015610125573d6000f35b3d6000fd5b6060833b61018e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101a99190610263565b600060405180830381855af49150503d80600081146101e4576040519150601f19603f3d011682016040523d82523d6000602084013e6101e9565b606091505b50915091506101f9828286610203565b9695505050505050565b6060831561021257508161004e565b8251156102225782518084602001fd5b8160405162461bcd60e51b8152600401610185919061027f565b60006020828403121561024d578081fd5b81516001600160a01b038116811461004e578182fd5b600082516102758184602087016102b2565b9190910192915050565b602081526000825180602084015261029e8160408501602087016102b2565b601f01601f19169190910160400192915050565b60005b838110156102cd5781810151838201526020016102b5565b838111156102dc576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200f9929ed3f3b47071afa968f70fa99aba21abdabc1843824d7b681956b9e564c64736f6c63430008040033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65640ad3a65bf5c1d8a3d51e90e1913822ee5821f860aa4540afa2b7633d63cf32fba2646970667358221220f940511d23731090187ae1f0e9887a1e43d55c5a8825279464d3922f37306a6564736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002015760003560e01c8063a217fddf1162000119578063cc98437511620000af578063dedc8d07116200007a578063dedc8d071462000515578063e8288695146200051f578063ee7bd9851462000536578063f5efbb4f146200054d57600080fd5b8063cc98437514620004bb578063cf65b30b14620004d0578063d547741f14620004e7578063d84c676414620004fe57600080fd5b8063c972898b11620000f0578063c972898b1462000464578063c9a3f180146200047b578063ca15c873146200048d578063cbe9889314620004a457600080fd5b8063a217fddf146200040b578063ae12b71d1462000414578063be203094146200044d57600080fd5b806336568abe116200019b5780637e2e610e11620001665780637e2e610e14620003975780639010d07c14620003c657806391d1485414620003dd578063a0407e1414620003f457600080fd5b806336568abe14620003045780633926b03e146200031b57806348e3eb331462000351578063504ecd74146200036857600080fd5b8063146b7d8711620001dc578063146b7d871462000297578063248a9ca314620002b05780632e7596e714620002d65780632f2ff15d14620002ed57600080fd5b8063016d4cb8146200020657806301ffc9a714620002495780630d14f57b1462000271575b600080fd5b6200022f620002173660046200292e565b60fe6020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b620002606200025a36600462002abc565b62000562565b604051901515815260200162000240565b62000288620002823660046200294d565b62000590565b60405190815260200162000240565b620002ae620002a836600462002b5e565b6200090b565b005b62000288620002c136600462002a4f565b60009081526065602052604090206001015490565b620002ae620002e7366004620029f4565b62000cfb565b620002ae620002fe36600462002a68565b62000d98565b620002ae6200031536600462002a68565b62000dc3565b61010054620003389064010000000090046001600160a01b031681565b6040516001600160a01b03909116815260200162000240565b6200028860008051602062003b6683398151915281565b6200037f6200037936600462002be4565b62000de9565b604051620002409a9998979695949392919062002cec565b620003ae620003a83660046200292e565b62000f84565b604051620002409a9998979695949392919062002d80565b62000338620003d736600462002a9a565b6200108b565b62000260620003ee36600462002a68565b620010ac565b620003386200040536600462002be4565b620010d7565b62000288600081565b6200043a620004253660046200292e565b60fb6020526000908152604090205460ff1681565b60405160ff909116815260200162000240565b620002ae6200045e36600462002ae6565b6200113f565b620002886200047536600462002be4565b620014da565b610100546200022f9063ffffffff1681565b620002886200049e36600462002a4f565b6200151a565b62000338620004b536600462002be4565b62001533565b6101015462000338906001600160a01b031681565b62000338620004e136600462002be4565b6200159e565b620002ae620004f836600462002a68565b62001609565b620002ae6200050f36600462002a4f565b62001615565b6200028860ff5481565b620003386200053036600462002be4565b62001637565b620003386200054736600462002be4565b620016a2565b6101025462000338906001600160a01b031681565b60006001600160e01b03198216635a05180f60e01b14806200058a57506200058a826200170d565b92915050565b6000600260c9541415620005c15760405162461bcd60e51b8152600401620005b89062002f0f565b60405180910390fd5b600260c95560ff548710801590620005d95750600087115b620006275760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f75676820746f6b656e7320626f6e64656400000000000000006044820152606401620005b8565b6001600160a01b038816620006765760405162461bcd60e51b815260206004820152601460248201527306f70657261746f722063616e6e6f7420626520360641b6044820152606401620005b8565b6001600160a01b038616620006ce5760405162461bcd60e51b815260206004820181905260248201527f6c656e6461626c65546f6b656e416464726573732063616e6e6f7420626520306044820152606401620005b8565b61010054620006e59063ffffffff166001620030c6565b610100805463ffffffff191663ffffffff929092169182179055600080808062000713858e808f8f62001744565b9350935093509350600060fd60008763ffffffff1663ffffffff16815260200190815260200160002090508560fe6000876001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550848160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550838160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550818160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b8160040160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550338160050160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550858160050160146101000a81548163ffffffff021916908363ffffffff160217905550428160050160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508a8a826006019190620008db92919062002819565b50620008ec600782018a8a62002819565b5050600160c955505063ffffffff9092169a9950505050505050505050565b600260c9541415620009315760405162461bcd60e51b8152600401620005b89062002f0f565b600260c95560008051602062003b6683398151915262000952813362001e81565b60006200096360208501856200292e565b6001600160a01b03161415620009bc5760405162461bcd60e51b815260206004820152601b60248201527f746f6b656e436f6e7472616374206d757374206e6f74206265203000000000006044820152606401620005b8565b6000620009d060408501602086016200292e565b6001600160a01b0316141562000a295760405162461bcd60e51b815260206004820152601860248201527f737761704d61726b6574206d757374206e6f74206265203000000000000000006044820152606401620005b8565b600083608001351162000a7f5760405162461bcd60e51b815260206004820152601b60248201527f76616c75654d756c7469706c696572206d757374206265203e203000000000006044820152606401620005b8565b60ff8216158062000a9357508160ff166001145b62000ad25760405162461bcd60e51b815260206004820152600e60248201526d0656e61626c65642031206f7220360941b6044820152606401620005b8565b600060fc8162000ae660208701876200292e565b6001600160a01b03168152602080820192909252604001600020915062000b10908501856200292e565b81546001600160a01b0319166001600160a01b039190911617815562000b3d60408501602086016200292e565b6001820180546001600160a01b0319166001600160a01b039290921691909117905562000b71606085016040860162002bbf565b60018201805462ffffff92909216600160a01b0262ffffff60a01b1990921691909117905562000ba8608085016060860162002c0a565b60018201805460ff92909216600160b81b0260ff60b81b199092169190911790556080840135600282015562000be560c0850160a0860162002b9b565b60038201805461ffff191661ffff9290921691909117905562000c0f60e0850160c086016200292e565b6003820180546001600160a01b0392909216620100000262010000600160b01b031990921691909117905562000c4d610100850160e086016200292e565b6004820180546001600160a01b0319166001600160a01b039290921691909117905562000c7f61010085018562003063565b62000c8f91600584019162002819565b5062000ca061012085018562003063565b62000cb091600684019162002819565b508260fb600062000cc560208801886200292e565b6001600160a01b031681526020810191909152604001600020805460ff191660ff929092169190911790555050600160c9555050565b60008051602062003b6683398151915262000d17813362001e81565b60ff8216158062000d2b57508160ff166001145b62000d6a5760405162461bcd60e51b815260206004820152600e60248201526d0656e61626c65642031206f7220360941b6044820152606401620005b8565b506001600160a01b0391909116600090815260fb60205260409020805460ff191660ff909216919091179055565b62000da4828262001ef4565b600082815260976020526040902062000dbe908262001f1e565b505050565b62000dcf828262001f35565b600082815260976020526040902062000dbe908262001fb3565b60fd6020526000908152604090208054600182015460028301546003840154600485015460058601546006870180546001600160a01b03978816989688169795861696948616959384169493831693600160a01b840463ffffffff1693600160c01b900467ffffffffffffffff1692909162000e65906200317a565b80601f016020809104026020016040519081016040528092919081815260200182805462000e93906200317a565b801562000ee45780601f1062000eb85761010080835404028352916020019162000ee4565b820191906000526020600020905b81548152906001019060200180831162000ec657829003601f168201915b50505050509080600701805462000efb906200317a565b80601f016020809104026020016040519081016040528092919081815260200182805462000f29906200317a565b801562000f7a5780601f1062000f4e5761010080835404028352916020019162000f7a565b820191906000526020600020905b81548152906001019060200180831162000f5c57829003601f168201915b505050505090508a565b60fc602052600090815260409020805460018201546002830154600384015460048501546005860180546001600160a01b039687169787871697600160a01b880462ffffff1697600160b81b900460ff16969561ffff8116956201000090910482169491169262000ff5906200317a565b80601f016020809104026020016040519081016040528092919081815260200182805462001023906200317a565b8015620010745780601f10620010485761010080835404028352916020019162001074565b820191906000526020600020905b8154815290600101906020018083116200105657829003601f168201915b50505050509080600601805462000efb906200317a565b6000828152609760205260408120620010a5908362001fca565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600060018263ffffffff1610158015620010fe57506101005463ffffffff90811690831611155b6200111d5760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020546001600160a01b031690565b600054610100900460ff168062001159575060005460ff16155b620011785760405162461bcd60e51b8152600401620005b89062002e7c565b600054610100900460ff161580156200119b576000805461ffff19166101011790555b600260c9541415620011c15760405162461bcd60e51b8152600401620005b89062002f0f565b600260c9556001600160a01b0385166200121e5760405162461bcd60e51b815260206004820152601b60248201527f5f70726f746f636f6c436f6e6669672063616e6e6f74206265203000000000006044820152606401620005b8565b6001600160a01b038416620012765760405162461bcd60e51b815260206004820152601960248201527f5f636f6e666967757261746f722063616e6e6f742062652030000000000000006044820152606401620005b8565b60008311620012d95760405162461bcd60e51b815260206004820152602860248201527f5f6d696e696d756d42616e6b4e6f6465426f6e646564416d6f756e742063616e60448201526706e6f7420626520360c41b6064820152608401620005b8565b620012e362001fd8565b620012ed62001fd8565b620012f762001fd8565b6200130162001fd8565b6200130b6200204a565b61010280546001600160a01b0319166001600160a01b03871690811790915560ff849055610100805463ffffffff1916905560408051631c93581f60e11b81529051633926b03e91600480820192602092909190829003018186803b1580156200137457600080fd5b505afa15801562001389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013af919062002b3f565b6101008054640100000000600160c01b0319166401000000006001600160a01b0393841681029190911791829055900416620014275760405162461bcd60e51b815260206004820152601660248201527505f626e706c546f6b656e2063616e6e6f7420626520360541b6044820152606401620005b8565b61010180546001600160a01b0319166001600160a01b038416908117909155620014a05760405162461bcd60e51b815260206004820152602360248201527f5f62616e6b4e6f64654c656e64696e67526577617264732063616e6e6f74206260448201526206520360ec1b6064820152608401620005b8565b620014bb60008051602062003b6683398151915285620020c0565b600160c9558015620014d3576000805461ff00191690555b5050505050565b600060018263ffffffff16101580156200150157506101005463ffffffff90811690831611155b6200150e57600062001511565b60015b60ff1692915050565b60008181526097602052604081206200058a90620020cc565b600060018263ffffffff16101580156200155a57506101005463ffffffff90811690831611155b620015795760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020600101546001600160a01b031690565b600060018263ffffffff1610158015620015c557506101005463ffffffff90811690831611155b620015e45760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020600401546001600160a01b031690565b62000dcf8282620020d7565b60008051602062003b6683398151915262001631813362001e81565b5060ff55565b600060018263ffffffff16101580156200165e57506101005463ffffffff90811690831611155b6200167d5760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020600301546001600160a01b031690565b600060018263ffffffff1610158015620016c957506101005463ffffffff90811690831611155b620016e85760405162461bcd60e51b8152600401620005b89062002eca565b5063ffffffff16600090815260fd60205260409020600201546001600160a01b031690565b60006001600160e01b03198216637965db0b60e01b14806200058a57506301ffc9a760e01b6001600160e01b03198316146200058a565b60008080806001600160a01b038516620017a15760405162461bcd60e51b815260206004820181905260248201527f6c656e6461626c65546f6b656e416464726573732063616e6e6f7420626520306044820152606401620005b8565b6001600160a01b03858116600090815260fc60209081526040808320815161014081018352815486168152600182015480871694820194909452600160a01b840462ffffff1692810192909252600160b81b90920460ff16606082015260028201546080820152600382015461ffff811660a0830152620100009004841660c0820152600482015490931660e0840152600581018054929392610100840191906200184c906200317a565b80601f01602080910402602001604051908101604052809291908181526020018280546200187a906200317a565b8015620018cb5780601f106200189f57610100808354040283529160200191620018cb565b820191906000526020600020905b815481529060010190602001808311620018ad57829003601f168201915b50505050508152602001600682018054620018e6906200317a565b80601f016020809104026020016040519081016040528092919081815260200182805462001914906200317a565b8015620019655780601f10620019395761010080835404028352916020019162001965565b820191906000526020600020905b8154815290600101906020018083116200194757829003601f168201915b5050505050815250509050856001600160a01b031681600001516001600160a01b03161480156200199a575060008160800151115b620019e15760405162461bcd60e51b815260206004820152601660248201527534b73b30b634b2103632b73230b13632903a37b5b2b760511b6044820152606401620005b8565b6001600160a01b038616600090815260fb602052604090205460ff1660011462001a4e5760405162461bcd60e51b815260206004820152601a60248201527f6c656e6461626c6520746f6b656e206e6f7420656e61626c65640000000000006044820152606401620005b8565b61010260009054906101000a90046001600160a01b03166001600160a01b031663ed7b60f26040518163ffffffff1660e01b815260040160206040518083038186803b15801562001a9e57600080fd5b505afa15801562001ab3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ad9919062002b3f565b60405162001ae790620028a8565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562001b23573d6000803e3d6000fd5b50945061010260009054906101000a90046001600160a01b03166001600160a01b031663ba33a0506040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b7657600080fd5b505afa15801562001b8b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bb1919062002b3f565b60405162001bbf90620028a8565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562001bfb573d6000803e3d6000fd5b50925062001c5a6040518060400160405280601681526020017510985b9ada5b99c8139bd91948141bdbdb081093941360521b815250604051806040016040528060058152602001641c1093941360da1b815250601260008762002101565b6101005490925062001c809064010000000090046001600160a01b031633858a62002228565b61010054604051637b809f7b60e11b81526401000000009091046001600160a01b039081166004830152838116602483015286811660448301523360648301526084820189905284169063f7013ef69060a401600060405180830381600087803b15801562001cee57600080fd5b505af115801562001d03573d6000803e3d6000fd5b505050610120820151606083015162001d229250819060008962002101565b9350846001600160a01b031663485e4344604051806101a001604052808d63ffffffff168152602001846040015162ffffff168152602001306001600160a01b031681526020018c6001600160a01b031681526020018b6001600160a01b0316815260200161010060049054906101000a90046001600160a01b03166001600160a01b0316815260200184602001516001600160a01b031681526020018460a0015161ffff1681526020018460c001516001600160a01b031681526020018460e001516001600160a01b03168152602001866001600160a01b0316815260200184600001516001600160a01b03168152602001876001600160a01b03168152506040518263ffffffff1660e01b815260040162001e40919062002f46565b600060405180830381600087803b15801562001e5b57600080fd5b505af115801562001e70573d6000803e3d6000fd5b505050505095509550955095915050565b62001e8d8282620010ac565b62001ef05762001ea8816001600160a01b0316601462002370565b62001eb583602062002370565b60405160200162001ec892919062002c73565b60408051601f198184030181529082905262461bcd60e51b8252620005b89160040162002e13565b5050565b60008281526065602052604090206001015462001f12813362001e81565b62000dbe838362002566565b6000620010a5836001600160a01b038416620025f0565b6001600160a01b038116331462001fa75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401620005b8565b62001ef0828262002642565b6000620010a5836001600160a01b038416620026ac565b6000620010a58383620027d4565b600054610100900460ff168062001ff2575060005460ff16155b620020115760405162461bcd60e51b8152600401620005b89062002e7c565b600054610100900460ff1615801562002034576000805461ffff19166101011790555b801562002047576000805461ff00191690555b50565b600054610100900460ff168062002064575060005460ff16155b620020835760405162461bcd60e51b8152600401620005b89062002e7c565b600054610100900460ff16158015620020a6576000805461ffff19166101011790555b600160c955801562002047576000805461ff001916905550565b62000da482826200280d565b60006200058a825490565b600082815260656020526040902060010154620020f5813362001e81565b62000dbe838362002642565b60008061010260009054906101000a90046001600160a01b03166001600160a01b031663e37b6a906040518163ffffffff1660e01b815260040160206040518083038186803b1580156200215457600080fd5b505afa15801562002169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200218f919062002b3f565b60405163641078a360e11b90620021b3908a908a908a908a908a9060240162002e28565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051620021f290620028a8565b620021ff92919062002de5565b604051809103906000f0801580156200221c573d6000803e3d6000fd5b50979650505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916200228e919062002c55565b6000604051808303816000865af19150503d8060008114620022cd576040519150601f19603f3d011682016040523d82523d6000602084013e620022d2565b606091505b5091509150818015620023005750805115806200230057508080602001905181019062002300919062002a2d565b620023685760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401620005b8565b505050505050565b6060600062002381836002620030f1565b6200238e906002620030ab565b67ffffffffffffffff811115620023b557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620023e0576020820181803683370190505b509050600360fc1b816000815181106200240a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200244857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006200246e846002620030f1565b6200247b906001620030ab565b90505b600181111562002515576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620024bf57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110620024e457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936200250d8162003160565b90506200247e565b508315620010a55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620005b8565b620025728282620010ac565b62001ef05760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620025ac3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205462002639575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200058a565b5060006200058a565b6200264e8282620010ac565b1562001ef05760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015620027c9576000620026d360018362003113565b8554909150600090620026e99060019062003113565b90508181146200276d5760008660000182815481106200271957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106200274b57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806200278d57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506200058a565b60009150506200058a565b6000826000018281548110620027fa57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b62001ef0828262002566565b82805462002827906200317a565b90600052602060002090601f0160209004810192826200284b576000855562002896565b82601f10620028665782800160ff1982351617855562002896565b8280016001018555821562002896579182015b828111156200289657823582559160200191906001019062002879565b50620028a4929150620028b6565b5090565b61098280620031e483390190565b5b80821115620028a45760008155600101620028b7565b60008083601f840112620028df578182fd5b50813567ffffffffffffffff811115620028f7578182fd5b6020830191508360208285010111156200291057600080fd5b9250929050565b803560ff811681146200292957600080fd5b919050565b60006020828403121562002940578081fd5b8135620010a581620031cd565b600080600080600080600060a0888a03121562002968578283fd5b87356200297581620031cd565b96506020880135955060408801356200298e81620031cd565b9450606088013567ffffffffffffffff80821115620029ab578485fd5b620029b98b838c01620028cd565b909650945060808a0135915080821115620029d2578384fd5b50620029e18a828b01620028cd565b989b979a50959850939692959293505050565b6000806040838503121562002a07578182fd5b823562002a1481620031cd565b915062002a246020840162002917565b90509250929050565b60006020828403121562002a3f578081fd5b81518015158114620010a5578182fd5b60006020828403121562002a61578081fd5b5035919050565b6000806040838503121562002a7b578182fd5b82359150602083013562002a8f81620031cd565b809150509250929050565b6000806040838503121562002aad578182fd5b50508035926020909101359150565b60006020828403121562002ace578081fd5b81356001600160e01b031981168114620010a5578182fd5b6000806000806080858703121562002afc578384fd5b843562002b0981620031cd565b9350602085013562002b1b81620031cd565b925060408501359150606085013562002b3481620031cd565b939692955090935050565b60006020828403121562002b51578081fd5b8151620010a581620031cd565b6000806040838503121562002b71578182fd5b823567ffffffffffffffff81111562002b88578283fd5b8301610140818603121562002a14578283fd5b60006020828403121562002bad578081fd5b813561ffff81168114620010a5578182fd5b60006020828403121562002bd1578081fd5b813562ffffff81168114620010a5578182fd5b60006020828403121562002bf6578081fd5b813563ffffffff81168114620010a5578182fd5b60006020828403121562002c1c578081fd5b620010a58262002917565b6000815180845262002c418160208601602086016200312d565b601f01601f19169290920160200192915050565b6000825162002c698184602087016200312d565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162002cad8160178501602088016200312d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162002ce08160288401602088016200312d565b01602801949350505050565b6001600160a01b038b811682528a81166020830152898116604083015288811660608301528781166080830152861660a082015263ffffffff851660c082015267ffffffffffffffff841660e0820152610140610100820181905260009062002d588382018662002c27565b905082810361012084015262002d6f818562002c27565b9d9c50505050505050505050505050565b6001600160a01b038b811682528a8116602083015262ffffff8a16604083015260ff891660608301526080820188905261ffff871660a083015285811660c0830152841660e0820152610140610100820181905260009062002d588382018662002c27565b6001600160a01b038316815260406020820181905260009062002e0b9083018462002c27565b949350505050565b602081526000620010a5602083018462002c27565b60a08152600062002e3d60a083018862002c27565b828103602084015262002e51818862002c27565b60ff96909616604084015250506001600160a01b039283166060820152911660809091015292915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526025908201527f496e76616c6964206f7220756e726567697374657265642062616e6b206e6f64604082015264652069642160d81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815163ffffffff1681526101a08101602083015162002f6c602084018262ffffff169052565b50604083015162002f8860408401826001600160a01b03169052565b50606083015162002fa460608401826001600160a01b03169052565b50608083015162002fc060808401826001600160a01b03169052565b5060a083015162002fdc60a08401826001600160a01b03169052565b5060c083015162002ff860c08401826001600160a01b03169052565b5060e08301516200300f60e084018261ffff169052565b50610100838101516001600160a01b03908116918401919091526101208085015182169084015261014080850151821690840152610160808501518216908401526101809384015116929091019190915290565b6000808335601e198436030181126200307a578283fd5b83018035915067ffffffffffffffff82111562003095578283fd5b6020019150368190038213156200291057600080fd5b60008219821115620030c157620030c1620031b7565b500190565b600063ffffffff808316818516808303821115620030e857620030e8620031b7565b01949350505050565b60008160001904831182151516156200310e576200310e620031b7565b500290565b600082821015620031285762003128620031b7565b500390565b60005b838110156200314a57818101518382015260200162003130565b838111156200315a576000848401525b50505050565b600081620031725762003172620031b7565b506000190190565b600181811c908216806200318f57607f821691505b60208210811415620031b157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146200204757600080fdfe60806040526040516109823803806109828339810160408190526100229161047d565b61004d60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51610588565b60008051602061093b8339815191521461007757634e487b7160e01b600052600160045260246000fd5b6100838282600061008a565b50506105ed565b61009383610164565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100d45750805b1561015f5761015d836001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011557600080fd5b505afa158015610129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014d9190610463565b8361030460201b6100291760201c565b505b505050565b6101778161033060201b6100551760201c565b6101d65760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b610259816001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021257600080fd5b505afa158015610226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024a9190610463565b61033060201b6100551760201c565b6102be5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016101cd565b806102e360008051602061093b83398151915260001b61033660201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060610329838360405180606001604052806027815260200161095b60279139610339565b9392505050565b3b151590565b90565b6060833b6103985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101cd565b600080856001600160a01b0316856040516103b39190610539565b600060405180830381855af49150503d80600081146103ee576040519150601f19603f3d011682016040523d82523d6000602084013e6103f3565b606091505b50909250905061040482828661040e565b9695505050505050565b6060831561041d575081610329565b82511561042d5782518084602001fd5b8160405162461bcd60e51b81526004016101cd9190610555565b80516001600160a01b038116811461045e57600080fd5b919050565b600060208284031215610474578081fd5b61032982610447565b6000806040838503121561048f578081fd5b61049883610447565b60208401519092506001600160401b03808211156104b4578283fd5b818501915085601f8301126104c7578283fd5b8151818111156104d9576104d96105d7565b604051601f8201601f19908116603f01168101908382118183101715610501576105016105d7565b81604052828152886020848701011115610519578586fd5b61052a8360208301602088016105ab565b80955050505050509250929050565b6000825161054b8184602087016105ab565b9190910192915050565b60208152600082518060208401526105748160408501602087016105ab565b601f01601f19169190910160400192915050565b6000828210156105a657634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156105c65781810151838201526020016105ae565b8381111561015d5750506000910152565b634e487b7160e01b600052604160045260246000fd5b61033f806105fc6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b610106565b565b606061004e83836040518060600160405280602781526020016102e36027913961012a565b9392505050565b3b151590565b90565b60006100917fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100c957600080fd5b505afa1580156100dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610101919061023c565b905090565b3660008037600080366000845af43d6000803e808015610125573d6000f35b3d6000fd5b6060833b61018e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101a99190610263565b600060405180830381855af49150503d80600081146101e4576040519150601f19603f3d011682016040523d82523d6000602084013e6101e9565b606091505b50915091506101f9828286610203565b9695505050505050565b6060831561021257508161004e565b8251156102225782518084602001fd5b8160405162461bcd60e51b8152600401610185919061027f565b60006020828403121561024d578081fd5b81516001600160a01b038116811461004e578182fd5b600082516102758184602087016102b2565b9190910192915050565b602081526000825180602084015261029e8160408501602087016102b2565b601f01601f19169190910160400192915050565b60005b838110156102cd5781810151838201526020016102b5565b838111156102dc576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200f9929ed3f3b47071afa968f70fa99aba21abdabc1843824d7b681956b9e564c64736f6c63430008040033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65640ad3a65bf5c1d8a3d51e90e1913822ee5821f860aa4540afa2b7633d63cf32fba2646970667358221220f940511d23731090187ae1f0e9887a1e43d55c5a8825279464d3922f37306a6564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBondedBankNode(address,uint256,address,string,string)": {
        "params": {
          "lendableTokenAddress": "Which lendable token will be lent to borrowers for this bank node (ex. the address of USDT's erc20 smart contract)",
          "nodeName": "the official name of the bank node",
          "operator": "The node operator who will be assigned the permissions of bank node admin for the newly created bank node",
          "tokensToBond": "The number of BNPL tokens to bond for the node",
          "website": "the official website of the bank node"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLendableToken((address,address,uint24,uint8,uint256,uint16,address,address,string,string),uint8)": {
        "notice": "allows admins with the role \"CONFIGURE_NODE_MANAGER_ROLE\" to add support for a new ERC20 token to be used as lendable tokens for new bank nodes"
      },
      "createBondedBankNode(address,uint256,address,string,string)": {
        "notice": "creates a new bonded bank node"
      },
      "setLendableTokenStatus(address,uint8)": {
        "notice": "allows admins with the role \"CONFIGURE_NODE_MANAGER_ROLE\" to enable/disable support for ERC20 tokens to be used as lendable tokens for new bank nodes (does not effect existing nodes)"
      },
      "setMinimumBankNodeBondedAmount(uint256)": {
        "notice": "allows admins with the role \"CONFIGURE_NODE_MANAGER_ROLE\" to set the minimum BNPL to bond per node"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 648,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 651,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1578,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1827,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 258,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)"
      },
      {
        "astId": 543,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 45,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2152_storage)"
      },
      {
        "astId": 208,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 815,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 858,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19711,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "enabledLendableTokens",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 19717,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "lendableTokens",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_address,t_struct(LendableToken)20666_storage)"
      },
      {
        "astId": 19723,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "bankNodes",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint32,t_struct(BankNode)20687_storage)"
      },
      {
        "astId": 19728,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "bankNodeAddressToId",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 19731,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "minimumBankNodeBondedAmount",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 19734,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "bankNodeCount",
        "offset": 0,
        "slot": "256",
        "type": "t_uint32"
      },
      {
        "astId": 19738,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "bnplToken",
        "offset": 4,
        "slot": "256",
        "type": "t_contract(IERC20)4115"
      },
      {
        "astId": 19742,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "bankNodeLendingRewards",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(BankNodeLendingRewards)21604"
      },
      {
        "astId": 19746,
        "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
        "label": "protocolConfig",
        "offset": 0,
        "slot": "258",
        "type": "t_contract(IBNPLProtocolConfig)21216"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BankNodeLendingRewards)21604": {
        "encoding": "inplace",
        "label": "contract BankNodeLendingRewards",
        "numberOfBytes": "20"
      },
      "t_contract(IBNPLProtocolConfig)21216": {
        "encoding": "inplace",
        "label": "contract IBNPLProtocolConfig",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)4115": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(LendableToken)20666_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBankNodeManager.LendableToken)",
        "numberOfBytes": "32",
        "value": "t_struct(LendableToken)20666_storage"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2152_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2152_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)253_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(BankNode)20687_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IBankNodeManager.BankNode)",
        "numberOfBytes": "32",
        "value": "t_struct(BankNode)20687_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2152_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 2151,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1851_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BankNode)20687_storage": {
        "encoding": "inplace",
        "label": "struct IBankNodeManager.BankNode",
        "members": [
          {
            "astId": 20668,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "bankNodeContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20670,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "bankNodeToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20672,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "bnplStakingPoolContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 20674,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "bnplStakingPoolToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 20676,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "lendableToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 20678,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "creator",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 20680,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "id",
            "offset": 20,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 20682,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "createdAt",
            "offset": 24,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 20684,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "nodeName",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 20686,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "website",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(LendableToken)20666_storage": {
        "encoding": "inplace",
        "label": "struct IBankNodeManager.LendableToken",
        "members": [
          {
            "astId": 20647,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20649,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "swapMarket",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20651,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "swapMarketPoolFee",
            "offset": 20,
            "slot": "1",
            "type": "t_uint24"
          },
          {
            "astId": 20653,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "decimals",
            "offset": 23,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 20655,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "valueMultiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20657,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "unusedFundsLendingMode",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 20659,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "unusedFundsLendingContract",
            "offset": 2,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 20661,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "unusedFundsLendingToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 20663,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "symbol",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 20665,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "poolSymbol",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)253_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 250,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 252,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1851_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 1846,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1850,
            "contract": "src/Management/BankNodeManager.sol:BankNodeManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}